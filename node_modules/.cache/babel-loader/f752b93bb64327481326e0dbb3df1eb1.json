{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalTransferERCToken.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToTransfer\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Amount\",\n  required: true,\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"recipientAddress\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Recipient\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"tokenTFA\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Token\",\n  required: true,\n  minLength: \"6\",\n  maxLength: \"6\",\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, \"Transfer Safely\"));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalTransferERCToken extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'tokenTFA':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Token has to be 6 digits\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Public key has to be 42 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Public key has to start with '0x'\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n      let web3 = this.props.web3;\n      let multisigERC20Token = this.props.multisigERC20Token;\n      let multisigERC20Address = this.props.multisigERC20Address;\n      let modal = this;\n      let updateERCBalances = this.props.updateERCBalances;\n      let tokenSymbol = this.props.tokenSymbol;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex'); // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisigERC20Token.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            var xhttp = new XMLHttpRequest();\n            var data = {\n              addressFrom: addrFrom,\n              addressTo: recipientAddress,\n              amount: amountToTransfer,\n              nonce: nonce,\n              symbol: tokenSymbol,\n              token: tokenTFA\n            };\n\n            xhttp.onreadystatechange = () => {\n              if (xhttp.readyState === 4) {\n                // request is done\n                if (xhttp.status === 200) {\n                  // successfully\n                  var obj = JSON.parse(xhttp.responseText);\n\n                  if (obj.verified) {\n                    console.log({\n                      addressFrom: addrFrom,\n                      addressTo: recipientAddress,\n                      amount: amountToTransfer,\n                      signature: obj.signature,\n                      symbol: tokenSymbol\n                    }); // Build the transaction\n\n                    web3.eth.getGasPrice().then(gasPrice => {\n                      console.log('Current gas price: ', gasPrice);\n                      multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).estimateGas({\n                        gas: gasPrice,\n                        from: addrFrom\n                      }, function (error, gasAmount) {\n                        if (error) {\n                          console.log(error);\n                        } else {\n                          console.log('Estimate of gas usage: ', gasAmount);\n                          const txObject = {\n                            nonce: web3.utils.toHex(txCount),\n                            gasLimit: web3.utils.toHex(gasAmount),\n                            gasPrice: web3.utils.toHex(gasPrice),\n                            to: multisigERC20Address,\n                            data: multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).encodeABI()\n                          };\n                          console.log(txObject); // Sign the transaction\n\n                          const tx = new Tx(txObject, {\n                            chain: 'ropsten',\n                            hardfork: 'petersburg'\n                          });\n                          tx.sign(priv);\n                          const serializedTransaction = tx.serialize();\n                          const rawTx = '0x' + serializedTransaction.toString('hex');\n                          console.log(rawTx); // Broadcast the transaction\n\n                          web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                            console.log('Hash of transaction: ', hash);\n                            modal.setState({\n                              txHash: hash,\n                              hashReceipt: true,\n                              confirmationReceipt: false\n                            });\n                            modal.openModal();\n                          }).once('confirmation', function (confNumber, receipt) {\n                            console.log('Transaction confirmation number: ', confNumber);\n                            console.log('Second receipt of transaction: ', receipt);\n                            updateERCBalances();\n                            modal.setState({\n                              txReceipt: receipt,\n                              confirmationReceipt: true,\n                              hashReceipt: false\n                            });\n                            modal.openModal();\n                          }).on('error', function (error) {\n                            console.log(error);\n                          });\n                        }\n                      });\n                    });\n                  } else {\n                    alert(\"Wrong Token Submitted\");\n                  }\n                }\n              }\n            };\n\n            xhttp.open(\"POST\", \"http://localhost:5597/submit-transaction-erc\", true);\n            xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhttp.send(JSON.stringify(data));\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      tokenTFA: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), this.state.txHash) : null, this.state.confirmationReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Transaction confirmed! \", React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Please view the receipt:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Transaction hash is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), this.state.txReceipt.transactionHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Block hash is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), this.state.txReceipt.blockHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Block number is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }), this.state.txReceipt.blockNumber, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Gas used:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), parseInt(this.state.txReceipt.gasUsed).toString()) : null));\n  }\n\n}\n\nexport default ModalTransferERCToken;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalTransferERCToken.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalTransferERCToken","constructor","props","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","transfer","state","amountToTransfer","recipientAddress","privateKey","tokenTFA","openModal","isOpen","keyCode","modalNode","contains","web3","multisigERC20Token","multisigERC20Address","modal","updateERCBalances","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","xhttp","XMLHttpRequest","data","addressFrom","addressTo","amount","symbol","token","onreadystatechange","readyState","status","obj","JSON","parse","responseText","verified","signature","getGasPrice","then","gasPrice","verifyTransaction__ef","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","alert","open","setRequestHeader","send","stringify","render","n","color","transactionHash","blockHash","blockNumber","parseInt","gasUsed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA,iBAAf;AAAkCC,EAAAA;AAAlC,CAAD,KACb;AAAM,EAAA,EAAE,EAAC,aAAT;AAAuB,EAAA,QAAQ,EAAEF,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEC,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,QAA5G;AACE,EAAA,QAAQ,MADV;AACW,EAAA,OAAO,EAAC,MADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAGE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEA,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,WAA5G;AACE,EAAA,QAAQ,MADV;AACW,EAAA,SAAS,EAAC,IADrB;AAC0B,EAAA,SAAS,EAAC,IADpC;AACyC,EAAA,OAAO,EAAC,QADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EAKE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,YAAxB;AAAqC,EAAA,QAAQ,EAAEA,iBAA/C;AAAkE,EAAA,SAAS,EAAC,aAA5E;AAA0F,EAAA,WAAW,EAAC,aAAtG;AACE,EAAA,QAAQ,MADV;AACW,EAAA,SAAS,EAAC,IADrB;AAC0B,EAAA,SAAS,EAAC,IADpC;AACyC,EAAA,OAAO,EAAC,MADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,EAOE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,UAAxB;AAAmC,EAAA,QAAQ,EAAEA,iBAA7C;AAAgE,EAAA,SAAS,EAAC,aAA1E;AAAwF,EAAA,WAAW,EAAC,OAApG;AACE,EAAA,QAAQ,MADV;AACW,EAAA,SAAS,EAAC,GADrB;AACyB,EAAA,SAAS,EAAC,GADnC;AACuC,EAAA,OAAO,EAAC,MAD/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPF,EASE;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBATF,CADR;;AAYA,MAAME,YAAY,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,SAAvB;AAAkCC,EAAAA,WAAlC;AAA+CC,EAAAA;AAA/C,CAAD,KAA8D;AAClF,SAAOb,QAAQ,CAACc,YAAT,CACN;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAiC,IAAA,SAAS,EAAEH,SAA5C;AAAuD,IAAA,OAAO,EAAEC,WAAhE;AAA6E,IAAA,QAAQ,EAAC,GAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,GAAG,EAAEF,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,OAAO,EAAED,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,OAAO,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyD;AAAM,IAAA,CAAC,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,CADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CAJF,CADF,CADM,EAWNE,QAAQ,CAACC,IAXH,CAAP;AAaA,CAdD;;AAgBA,MAAMC,qBAAN,SAAoCnB,KAAK,CAACC,SAA1C,CAAoD;AAElDmB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAenBb,iBAfmB,GAeEc,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACC,cAAN;AAD6B,4BAELD,KAAK,CAACE,MAFD;AAAA,YAErBC,IAFqB,iBAErBA,IAFqB;AAAA,YAEfC,KAFe,iBAEfA,KAFe;;AAI7B,cAAQD,IAAR;AACA,aAAK,kBAAL;AACE,cAAIH,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AACzCN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,uBAA/B;AACD,WAFD,MAEO;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF,aAAK,UAAL;AACE,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AAChCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,0BAA/B;AACH,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAChDN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,uBAA/B;AACD,WAFM,MAEA;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF,aAAK,YAAL;AACE,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AAClCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,qCAA/B;AACD,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAChDN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,0CAA/B;AACD,WAFM,MAEA;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF,aAAK,kBAAL;AACE,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AAClCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,oCAA/B;AACD,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAChDN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,mCAA/B;AACD,WAFM,MAEA;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACH;AACE;AAnCF;;AAsCA,WAAKE,QAAL,CAAc;AAAE,SAACN,IAAD,GAAQC;AAAV,OAAd;AACD,KA1DkB;;AAAA,SA4DnBnB,YA5DmB,GA4DHe,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKS,QAAL,CAAc,KAAKC,KAAL,CAAWC,gBAAzB,EAA2C,KAAKD,KAAL,CAAWE,gBAAtD,EAAwE,KAAKF,KAAL,CAAWG,UAAnF,EAA+F,KAAKH,KAAL,CAAWI,QAA1G;AACD,KA/DkB;;AAAA,SAiEnBC,SAjEmB,GAiEP,MAAM;AACnB,WAAKP,QAAL,CAAc;AACbQ,QAAAA,MAAM,EAAE;AADK,OAAd;AAGE,KArEkB;;AAAA,SAuEnB5B,UAvEmB,GAuEN,MAAM;AACnB,WAAKoB,QAAL,CAAc;AACZQ,QAAAA,MAAM,EAAE;AADI,OAAd;AAGC,KA3EkB;;AAAA,SA6EnB1B,SA7EmB,GA6ENS,KAAD,IAAW;AACxB,aAAOA,KAAK,CAACkB,OAAN,KAAkB,EAAlB,IAAwB,KAAK7B,UAAL,EAA/B;AACE,KA/EkB;;AAAA,SAiFnBG,WAjFmB,GAiFJQ,KAAD,IAAW;AACxB,UAAI,KAAKmB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBpB,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKb,UAAL;AACD,KApFmB;;AAAA,SAsFnBqB,QAtFmB,GAsFR,CAACE,gBAAD,EAAmBC,gBAAnB,EAAqCC,UAArC,EAAiDC,QAAjD,KAA8D;AAEvE,UAAIM,IAAI,GAAG,KAAKtB,KAAL,CAAWsB,IAAtB;AACA,UAAIC,kBAAkB,GAAG,KAAKvB,KAAL,CAAWuB,kBAApC;AACA,UAAIC,oBAAoB,GAAG,KAAKxB,KAAL,CAAWwB,oBAAtC;AACA,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,iBAAiB,GAAG,KAAK1B,KAAL,CAAW0B,iBAAnC;AACA,UAAIC,WAAW,GAAG,KAAK3B,KAAL,CAAW2B,WAA7B;AACA,UAAIC,QAAQ,GAAG,KAAK5B,KAAL,CAAW6B,OAA1B;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYjB,UAAZ,EAAwB,KAAxB,CAAb,CATuE,CAWvE;;AACAO,MAAAA,IAAI,CAACW,GAAL,CAASC,mBAAT,CAA6BN,QAA7B,EAAuC,CAACO,GAAD,EAAMC,OAAN,KAAkB;AACvD;AACAb,QAAAA,kBAAkB,CAACc,OAAnB,CAA2BC,iBAA3B,CAA6CV,QAA7C,EAAuDW,IAAvD,CAA4D;AAACP,UAAAA,IAAI,EAAEJ;AAAP,SAA5D,EAA8E,CAACY,KAAD,EAAQC,KAAR,KAAkB;AAC1F,cAAID,KAAJ,EAAW;AACPE,YAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,WAFD,MAEO;AAEH,gBAAII,KAAK,GAAG,IAAIC,cAAJ,EAAZ;AACA,gBAAIC,IAAI,GACR;AAAEC,cAAAA,WAAW,EAAEnB,QAAf;AACEoB,cAAAA,SAAS,EAAElC,gBADb;AAEEmC,cAAAA,MAAM,EAAEpC,gBAFV;AAGE4B,cAAAA,KAAK,EAAEA,KAHT;AAIES,cAAAA,MAAM,EAAEvB,WAJV;AAKEwB,cAAAA,KAAK,EAAEnC;AALT,aADA;;AAQA4B,YAAAA,KAAK,CAACQ,kBAAN,GAA2B,MAAM;AAC7B,kBAAIR,KAAK,CAACS,UAAN,KAAqB,CAAzB,EAA4B;AAAE;AAC1B,oBAAIT,KAAK,CAACU,MAAN,KAAiB,GAArB,EAA0B;AAAE;AACxB,sBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWb,KAAK,CAACc,YAAjB,CAAV;;AACA,sBAAIH,GAAG,CAACI,QAAR,EAAkB;AACdjB,oBAAAA,OAAO,CAACC,GAAR,CAAY;AACZI,sBAAAA,WAAW,EAAEnB,QADD;AAEZoB,sBAAAA,SAAS,EAAElC,gBAFC;AAGZmC,sBAAAA,MAAM,EAAEpC,gBAHI;AAIZ+C,sBAAAA,SAAS,EAAEL,GAAG,CAACK,SAJH;AAKZV,sBAAAA,MAAM,EAAEvB;AALI,qBAAZ,EADc,CAQd;;AACAL,oBAAAA,IAAI,CAACW,GAAL,CAAS4B,WAAT,GAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACtCrB,sBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCoB,QAAnC;AACAxC,sBAAAA,kBAAkB,CAACc,OAAnB,CAA2B2B,qBAA3B,CAAiDlD,gBAAjD,EAAmED,gBAAnE,EAAqF0C,GAAG,CAACK,SAAzF,EAAoGjC,WAApG,EAAiHsC,WAAjH,CAA6H;AAACC,wBAAAA,GAAG,EAAEH,QAAN;AAAgB/B,wBAAAA,IAAI,EAAEJ;AAAtB,uBAA7H,EAA8J,UAASY,KAAT,EAAgB2B,SAAhB,EAA2B;AACrL,4BAAI3B,KAAJ,EAAW;AACPE,0BAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEH,yBAHD,MAGO;AACPE,0BAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCwB,SAAvC;AAEA,gCAAMC,QAAQ,GAAG;AACb3B,4BAAAA,KAAK,EAAEnB,IAAI,CAAC+C,KAAL,CAAWC,KAAX,CAAiBlC,OAAjB,CADM;AAEbmC,4BAAAA,QAAQ,EAAEjD,IAAI,CAAC+C,KAAL,CAAWC,KAAX,CAAiBH,SAAjB,CAFG;AAGbJ,4BAAAA,QAAQ,EAAEzC,IAAI,CAAC+C,KAAL,CAAWC,KAAX,CAAiBP,QAAjB,CAHG;AAIbS,4BAAAA,EAAE,EAAEhD,oBAJS;AAKbsB,4BAAAA,IAAI,EAAEvB,kBAAkB,CAACc,OAAnB,CAA2B2B,qBAA3B,CAAiDlD,gBAAjD,EAAmED,gBAAnE,EAAqF0C,GAAG,CAACK,SAAzF,EAAoGjC,WAApG,EAAiH8C,SAAjH;AALO,2BAAjB;AAOA/B,0BAAAA,OAAO,CAACC,GAAR,CAAYyB,QAAZ,EAVO,CAYP;;AACA,gCAAMM,EAAE,GAAG,IAAI5F,EAAJ,CAAOsF,QAAP,EAAiB;AAAEO,4BAAAA,KAAK,EAAE,SAAT;AAAoBC,4BAAAA,QAAQ,EAAE;AAA9B,2BAAjB,CAAX;AACAF,0BAAAA,EAAE,CAACG,IAAH,CAAQ/C,IAAR;AAEA,gCAAMgD,qBAAqB,GAAGJ,EAAE,CAACK,SAAH,EAA9B;AACA,gCAAMC,KAAK,GAAG,OAAOF,qBAAqB,CAACG,QAAtB,CAA+B,KAA/B,CAArB;AAEAvC,0BAAAA,OAAO,CAACC,GAAR,CAAYqC,KAAZ,EAnBO,CAsBP;;AACA1D,0BAAAA,IAAI,CAACW,GAAL,CAASiD,qBAAT,CAA+BF,KAA/B,EACCG,IADD,CACM,iBADN,EACyB,UAASC,IAAT,EAAc;AACnC1C,4BAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCyC,IAArC;AACA3D,4BAAAA,KAAK,CAACf,QAAN,CAAe;AACb2E,8BAAAA,MAAM,EAAED,IADK;AAEbE,8BAAAA,WAAW,EAAE,IAFA;AAGbC,8BAAAA,mBAAmB,EAAE;AAHR,6BAAf;AAKA9D,4BAAAA,KAAK,CAACR,SAAN;AACH,2BATD,EAUCkE,IAVD,CAUM,cAVN,EAUsB,UAASK,UAAT,EAAqBC,OAArB,EAA6B;AAC/C/C,4BAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD6C,UAAjD;AACA9C,4BAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C8C,OAA/C;AACA/D,4BAAAA,iBAAiB;AAEjBD,4BAAAA,KAAK,CAACf,QAAN,CAAe;AACbgF,8BAAAA,SAAS,EAAED,OADE;AAEbF,8BAAAA,mBAAmB,EAAE,IAFR;AAGbD,8BAAAA,WAAW,EAAE;AAHA,6BAAf;AAKA7D,4BAAAA,KAAK,CAACR,SAAN;AACH,2BArBD,EAsBC0E,EAtBD,CAsBI,OAtBJ,EAsBa,UAASnD,KAAT,EAAe;AAAEE,4BAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAAoB,2BAtBlD;AAwBC;AACJ,uBApDD;AAqDD,qBAvDH;AAyDH,mBAlED,MAkEO;AACHoD,oBAAAA,KAAK,CAAC,uBAAD,CAAL;AACH;AACJ;AACJ;AACA,aA3EL;;AA4EAhD,YAAAA,KAAK,CAACiD,IAAN,CAAW,MAAX,EAAmB,8CAAnB,EAAmE,IAAnE;AACAjD,YAAAA,KAAK,CAACkD,gBAAN,CAAuB,cAAvB,EAAuC,kBAAvC;AACAlD,YAAAA,KAAK,CAACmD,IAAN,CAAWvC,IAAI,CAACwC,SAAL,CAAelD,IAAf,CAAX;AAEC;AAAC,SA9FZ;AA+FO,OAjGT;AAmGC,KArMgB;;AAElB,SAAKlC,KAAL,GAAa;AACVyE,MAAAA,MAAM,EAAE,EADE;AAEVK,MAAAA,SAAS,EAAE,EAFD;AAGV7E,MAAAA,gBAAgB,EAAE,EAHR;AAIVC,MAAAA,gBAAgB,EAAE,EAJR;AAKVC,MAAAA,UAAU,EAAE,EALF;AAMVC,MAAAA,QAAQ,EAAE,EANA;AAOZE,MAAAA,MAAM,EAAE,KAPI;AAQVoE,MAAAA,WAAW,EAAE,KARH;AASVC,MAAAA,mBAAmB,EAAC;AATV,KAAb;AAWA;;AA2LDU,EAAAA,MAAM,GAAG;AAER,WACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AACC,MAAA,YAAY,EAAE,KAAK/G,YADpB;AAEC,MAAA,iBAAiB,EAAE,KAAKC,iBAFzB;AAGC,MAAA,MAAM,EAAE,KAAKyB,KAAL,CAAWxB,MAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAME,KAAKwB,KAAL,CAAWM,MAAX,IACA,oBAAC,YAAD;AACC,MAAA,UAAU,EAAE,KAAK5B,UADlB;AAEC,MAAA,SAAS,EAAE,KAAKE,SAFjB;AAGC,MAAA,WAAW,EAAE,KAAKC,WAHnB;AAIC,MAAA,QAAQ,EAAEyG,CAAC,IAAI,KAAK9E,SAAL,GAAiB8E,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,KAAKtF,KAAL,CAAW0E,WAAX,GACE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/C,EACC,KAAK1E,KAAL,CAAWyE,MADZ,CADF,GAII,IATN,EAUG,KAAKzE,KAAL,CAAW2E,mBAAX,GACC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlD,EACA;AAAM,MAAA,KAAK,EAAE;AAACY,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADA,EAC8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9D,EAEA;AAAM,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFA,EAE0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF1D,EAGC,KAAKvF,KAAL,CAAW8E,SAAX,CAAqBU,eAHtB,EAGsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHtC,EAIA;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJA,EAIoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJpD,EAKC,KAAKvF,KAAL,CAAW8E,SAAX,CAAqBW,SALtB,EAKgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALhC,EAMA;AAAM,MAAA,KAAK,EAAE;AAACF,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANA,EAMsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANtD,EAOC,KAAKvF,KAAL,CAAW8E,SAAX,CAAqBY,WAPtB,EAOkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPlC,EAQA;AAAM,MAAA,KAAK,EAAE;AAACH,QAAAA,KAAK,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARA,EAQ+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAR/C,EASEI,QAAQ,CAAC,KAAK3F,KAAL,CAAW8E,SAAX,CAAqBc,OAAtB,CAAT,CAAyCvB,QAAzC,EATD,CADD,GAYG,IAtBN,CAPF,CADH;AAoCA;;AAhPiD;;AAmPpD,eAAenF,qBAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"amountToTransfer\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Amount\" \n            required pattern=\"\\d+\"/>\n          <input type=\"text\" name=\"recipientAddress\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Recipient\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <input type=\"text\" name=\"tokenTFA\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Token\"\n            required minLength=\"6\" maxLength=\"6\" pattern=\"\\d+\"/>\n          <button type=\"submit\" className=\"smartButton\">Transfer Safely</button>\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalTransferERCToken extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      tokenTFA: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'amountToTransfer': \n      if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }  \n      break;\n    case 'tokenTFA':\n      if (event.target.validity.tooShort) {\n          event.target.setCustomValidity(\"Token has to be 6 digits\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'recipientAddress':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Public key has to be 42 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Public key has to start with '0x'\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }     \n    default:\n      break;\n    }\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n\n    let web3 = this.props.web3;\n    let multisigERC20Token = this.props.multisigERC20Token;\n    let multisigERC20Address = this.props.multisigERC20Address;\n    let modal = this;\n    let updateERCBalances = this.props.updateERCBalances;\n    let tokenSymbol = this.props.tokenSymbol;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    // Getting Ethereum transaction count\n    web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n      // Retrieving the current nonce inside the contract\n      multisigERC20Token.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n            if (error) {\n                console.log(error)\n            } else {\n                \n                var xhttp = new XMLHttpRequest();\n                var data =\n                { addressFrom: addrFrom,\n                  addressTo: recipientAddress, \n                  amount: amountToTransfer,\n                  nonce: nonce,\n                  symbol: tokenSymbol,\n                  token: tokenTFA\n                };\n                xhttp.onreadystatechange = () => {\n                    if (xhttp.readyState === 4) { // request is done\n                        if (xhttp.status === 200) { // successfully\n                            var obj = JSON.parse(xhttp.responseText);\n                            if (obj.verified) {\n                                console.log({ \n                                addressFrom: addrFrom,\n                                addressTo: recipientAddress, \n                                amount: amountToTransfer, \n                                signature: obj.signature,\n                                symbol: tokenSymbol\n                                });\n                                // Build the transaction\n                                web3.eth.getGasPrice().then((gasPrice) => {\n                                    console.log('Current gas price: ', gasPrice);    \n                                    multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                                        if (error) {\n                                            console.log(error);\n                                            \n                                        } else {\n                                        console.log('Estimate of gas usage: ', gasAmount);\n                                        \n                                        const txObject = {\n                                            nonce: web3.utils.toHex(txCount),\n                                            gasLimit: web3.utils.toHex(gasAmount), \n                                            gasPrice: web3.utils.toHex(gasPrice),\n                                            to: multisigERC20Address,\n                                            data: multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).encodeABI()\n                                        };\n                                        console.log(txObject);\n\n                                        // Sign the transaction\n                                        const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                                        tx.sign(priv);\n\n                                        const serializedTransaction = tx.serialize();\n                                        const rawTx = '0x' + serializedTransaction.toString('hex');\n                                        \n                                        console.log(rawTx);\n                                        \n                                        \n                                        // Broadcast the transaction\n                                        web3.eth.sendSignedTransaction(rawTx)\n                                        .once('transactionHash', function(hash){ \n                                            console.log('Hash of transaction: ', hash);\n                                            modal.setState({ \n                                              txHash: hash,\n                                              hashReceipt: true,\n                                              confirmationReceipt: false                       \n                                            });\n                                            modal.openModal();\n                                        })\n                                        .once('confirmation', function(confNumber, receipt){ \n                                            console.log('Transaction confirmation number: ', confNumber);\n                                            console.log('Second receipt of transaction: ', receipt);\n                                            updateERCBalances();\n                                    \n                                            modal.setState({ \n                                              txReceipt: receipt,\n                                              confirmationReceipt: true, \n                                              hashReceipt: false\n                                            });\n                                            modal.openModal(); \n                                        })\n                                        .on('error', function(error){ console.log(error) });\n                                        \n                                        }\n                                    })\n                                  })\n\n                            } else {\n                                alert(\"Wrong Token Submitted\");\n                            }   \n                        }\n                    }\n                    };\n                xhttp.open(\"POST\", \"http://localhost:5597/submit-transaction-erc\", true);\n                xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n                xhttp.send(JSON.stringify(data));\n                   \n                }})\n            }\n    )\n    }\n  \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <p className=\"modalTextTx\">Transaction hash is:<br/>\n            {this.state.txHash}\n            </p> \n            : null} \n          {this.state.confirmationReceipt ?\n            <p className=\"modalTextTx\">Transaction confirmed! <hr/>\n            <span style={{color: 'black'}}>Please view the receipt:</span><br/>\n            <span style={{color: 'black'}}>Transaction hash is:</span><br/>\n            {this.state.txReceipt.transactionHash}<br/>\n            <span style={{color: 'black'}}>Block hash is:</span><br/>\n            {this.state.txReceipt.blockHash}<br/>\n            <span style={{color: 'black'}}>Block number is:</span><br/>\n            {this.state.txReceipt.blockNumber}<br/>\n            <span style={{color: 'black'}}>Gas used:</span><br/>\n            {(parseInt(this.state.txReceipt.gasUsed)).toString()}\n            </p> \n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalTransferERCToken;"]},"metadata":{},"sourceType":"module"}