{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalCurrentNonce.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({\n  onHandleClick\n}) => React.createElement(\"button\", {\n  className: \"smartButtonLong\",\n  onClick: onHandleClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, \"check current nonce\");\n\nconst ModalContent = ({\n  toggle,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-nonce\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalCurrentNonce extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onHandleClick = event => {\n      event.preventDefault();\n      this.getNonce();\n      this.toggle();\n    };\n\n    this.getNonce = () => {\n      this.props.multisig.methods.transactionNonces(this.props.address).call({\n        from: this.state.address\n      }, (error, nonce) => {\n        if (error) {\n          console.log(error);\n        }\n\n        {\n          console.log(nonce);\n          this.setState({\n            nonce: nonce\n          });\n        }\n      });\n    };\n\n    this.toggle = () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.toggle();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.toggle();\n    };\n\n    this.state = {\n      isOpen: false,\n      nonce: ''\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      onHandleClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      toggle: this.toggle,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Your current nonce is: \", this.state.nonce)));\n  }\n\n}\n\nexport default ModalCurrentNonce;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalCurrentNonce.js"],"names":["React","Component","ReactDOM","ModalTrigger","onHandleClick","ModalContent","toggle","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalCurrentNonce","constructor","props","event","preventDefault","getNonce","multisig","methods","transactionNonces","address","call","from","state","error","nonce","console","log","setState","isOpen","keyCode","modalNode","contains","target","render","n"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({onHandleClick}) => <button className=\"smartButtonLong\" onClick={onHandleClick}>check current nonce</button>;\nconst ModalContent = ({toggle, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-nonce\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={toggle}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalCurrentNonce extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n  \t\tisOpen: false,\n      nonce: ''\n    }\n  }\n\n  onHandleClick = (event) => {\n    event.preventDefault();\n    this.getNonce();\n    this.toggle();  \n  }\n\n  getNonce = () => {\n    this.props.multisig.methods.transactionNonces(this.props.address).call({ from: this.state.address }, (error, nonce) => {\n        if (error) {\n          console.log(error);\n        } {\n          console.log(nonce);\n          this.setState({ nonce: nonce });\n        }\n      }\n    );\n  }\n    \n  toggle = () => {\n\tthis.setState({ \n\t\tisOpen: !this.state.isOpen, \n\t  });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.toggle();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.toggle();\n\t};\n\n\n  render() {\n\n  \treturn (\n      <div>\n       <ModalTrigger onHandleClick={this.onHandleClick}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\ttoggle={this.toggle} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t<p className=\"modalText\">Your current nonce is: {this.state.nonce}</p> \n       \t</ModalContent>\n       }\n      </div>\n    );\n  }\n}\n\nexport default ModalCurrentNonce;"]},"metadata":{},"sourceType":"module"}