{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContractUI from './SmartContractUI';\nimport Login from './LoginForm';\n\nclass App extends Component {\n  /*componentWillMount() {\n    this.loadBlockchainData();\n  }\n   async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    this.setState({ web3: web3 });\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    let my = this;\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({ multisig });\n    web3.eth.getBalance(this.state.account).then(result => {\n      my.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n     this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n      if (!error) {\n        console.log(result);\n        my.setState({ balance : result });\n      } else {\n        console.log(error);\n      }\n    });\n    this.setState({ loading : false });\n  }\n  */\n\n  /*getEtherBalance = () => {\n    web3.eth.getBalance(this.state.account).then(result => {\n      this.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n  }*/\n  constructor(props) {\n    super(props);\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    const accounts = web3.eth.getAccounts();\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    let etherBalance;\n    let balance;\n    web3.eth.getBalance(accounts[0]).then(result => {\n      etherBalance = result;\n      console.log({\n        etherBalance: result\n      });\n    });\n    multisig.methods.balances(accounts[0]).call({\n      from: accounts[0]\n    }, function (error, result) {\n      if (!error) {\n        console.log(result);\n        balance = result;\n      } else {\n        console.log(error);\n      }\n    });\n    this.state = {\n      web3: web3,\n      multisig: multisig,\n      account: accounts[0],\n      etherBalance: etherBalance,\n      balance: balance,\n      safetyKey: '',\n      nonce: '',\n      loading: false\n    };\n    this.deposit = this.deposit.bind(this);\n    this.depositSafely = this.depositSafely.bind(this);\n    this.getSafetyAddress = this.getSafetyAddress.bind(this);\n    this.getNonce = this.getNonce.bind(this);\n    this.transfer = this.transfer.bind(this);\n  }\n\n  async getSafetyAddress(address) {\n    this.setState({\n      loading: true\n    });\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.safetyKeys(address).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        my.setState({\n          safetyKey: result\n        });\n        res = result;\n      }\n\n      my.setState({\n        loading: false\n      });\n    });\n    return res;\n  }\n\n  async getNonce(address) {\n    this.setState({\n      loading: true\n    });\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.transactionNonces(this.state.account).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        my.setState({\n          nonce: result\n        });\n        res = result;\n      }\n\n      my.setState({\n        loading: false\n      });\n    });\n    return res;\n  }\n\n  deposit(amount) {\n    this.setState({\n      loading: true\n    });\n    console.log({\n      account: this.state.account,\n      amount: amount\n    });\n    this.state.multisig.methods.deposit().send({\n      value: amount,\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      let my = this;\n      this.state.multisig.methods.balances(this.state.account).call({\n        from: this.state.account\n      }, function (error, result) {\n        if (!error) {\n          console.log(result);\n          my.setState({\n            balance: result\n          });\n        }\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  depositSafely(amount, address) {\n    this.setState({\n      loading: true\n    });\n    this.state.multisig.methods.deposit(address).send({\n      value: amount,\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      let my = this;\n      this.state.multisig.methods.balances(this.state.account).call({\n        from: this.state.account\n      }, function (error, result) {\n        if (!error) {\n          console.log(result);\n          my.setState({\n            balance: result\n          });\n        }\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  transfer(addressTo, amount, signature) {\n    this.setState({\n      loading: true\n    });\n    console.log({\n      from: this.state.account,\n      to: addressTo,\n      amount: amount,\n      sig: signature\n    });\n    this.state.multisig.methods.verifyTransaction(this.state.account, addressTo, amount, signature).send({\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      let my = this;\n      this.state.multisig.methods.balances(this.state.account).call({\n        from: this.state.account\n      }, function (error, result) {\n        if (!error) {\n          console.log(result);\n          my.setState({\n            balance: result\n          });\n        }\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid dappMainStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      role: \"main\",\n      className: \"col-lg-12 d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Loading...\")) : React.createElement(SmartContractUI, {\n      balance: this.state.balance,\n      address: this.state.account,\n      safetyKey: this.state.safetyKey,\n      deposit: this.deposit,\n      depositSafely: this.depositSafely,\n      getSafetyAddress: this.getSafetyAddress,\n      getNonce: this.getNonce,\n      transfer: this.transfer,\n      etherBalance: this.state.etherBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/App.js"],"names":["React","Component","Web3","MULTISIG_ABI","MULTISIG_ADDRESS","SmartContractUI","Login","App","constructor","props","web3","givenProvider","accounts","eth","getAccounts","multisig","Contract","etherBalance","balance","getBalance","then","result","console","log","methods","balances","call","from","error","state","account","safetyKey","nonce","loading","deposit","bind","depositSafely","getSafetyAddress","getNonce","transfer","address","setState","my","res","safetyKeys","transactionNonces","amount","send","value","once","receipt","addressTo","signature","to","sig","verifyTransaction","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,UAA/C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAE1B;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;AAMAO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACS,aAAL,IAAsB,uBAA/B,CAAb;AACA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIL,IAAI,CAACG,GAAL,CAASG,QAAb,CAAsBb,YAAtB,EAAoCC,gBAApC,CAAjB;AAEA,QAAIa,YAAJ;AACA,QAAIC,OAAJ;AACAR,IAAAA,IAAI,CAACG,GAAL,CAASM,UAAT,CAAoBP,QAAQ,CAAC,CAAD,CAA5B,EAAiCQ,IAAjC,CAAsCC,MAAM,IAAI;AAC9CJ,MAAAA,YAAY,GAAGI,MAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,QAAAA,YAAY,EAAGI;AAAjB,OAAZ;AACD,KAHD;AAKAN,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,QAAjB,CAA0Bb,QAAQ,CAAC,CAAD,CAAlC,EAAuCc,IAAvC,CAA4C;AAAEC,MAAAA,IAAI,EAAEf,QAAQ,CAAC,CAAD;AAAhB,KAA5C,EAAmE,UAASgB,KAAT,EAAgBP,MAAhB,EAAuB;AACxF,UAAI,CAACO,KAAL,EAAY;AACVN,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAH,QAAAA,OAAO,GAAGG,MAAV;AACD,OAHD,MAGO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACD;AACF,KAPD;AASA,SAAKC,KAAL,GAAa;AACXnB,MAAAA,IAAI,EAAEA,IADK;AAEXK,MAAAA,QAAQ,EAAEA,QAFC;AAGXe,MAAAA,OAAO,EAAElB,QAAQ,CAAC,CAAD,CAHN;AAIXK,MAAAA,YAAY,EAAEA,YAJH;AAKXC,MAAAA,OAAO,EAAEA,OALE;AAMXa,MAAAA,SAAS,EAAE,EANA;AAOXC,MAAAA,KAAK,EAAE,EAPI;AAQXC,MAAAA,OAAO,EAAE;AARE,KAAb;AAUA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKI,QAAL,GAAgB,KAAKA,QAAL,CAAcJ,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAED,QAAME,gBAAN,CAAuBG,OAAvB,EAAgC;AAC9B,SAAKC,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIS,EAAE,GAAG,IAAT;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,UAAM,KAAKd,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BoB,UAA5B,CAAuCJ,OAAvC,EAAgDd,IAAhD,CAAqD;AAAEC,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAnB,KAArD,EAAmF,UAASF,KAAT,EAAgBP,MAAhB,EAAuB;AAC5G,UAAI,CAACO,KAAL,EAAY;AACVc,QAAAA,EAAE,CAACD,QAAH,CAAY;AAAEV,UAAAA,SAAS,EAAGV;AAAd,SAAZ;AACAsB,QAAAA,GAAG,GAAGtB,MAAN;AACD;;AACDqB,MAAAA,EAAE,CAACD,QAAH,CAAY;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAZ;AACD,KANG,CAAN;AAOA,WAAOU,GAAP;AACD;;AAED,QAAML,QAAN,CAAeE,OAAf,EAAwB;AACtB,SAAKC,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIS,EAAE,GAAG,IAAT;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,UAAM,KAAKd,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BqB,iBAA5B,CAA8C,KAAKhB,KAAL,CAAWC,OAAzD,EAAkEJ,IAAlE,CAAuE;AAAEC,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAnB,KAAvE,EAAqG,UAASF,KAAT,EAAgBP,MAAhB,EAAuB;AAC9H,UAAI,CAACO,KAAL,EAAY;AACVc,QAAAA,EAAE,CAACD,QAAH,CAAY;AAAET,UAAAA,KAAK,EAAGX;AAAV,SAAZ;AACAsB,QAAAA,GAAG,GAAGtB,MAAN;AACD;;AACDqB,MAAAA,EAAE,CAACD,QAAH,CAAY;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAZ;AACD,KANG,CAAN;AAOA,WAAOU,GAAP;AACD;;AAEDT,EAAAA,OAAO,CAACY,MAAD,EAAS;AACd,SAAKL,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEO,MAAAA,OAAO,EAAG,KAAKD,KAAL,CAAWC,OAAvB;AAAgCgB,MAAAA,MAAM,EAAGA;AAAzC,KAAZ;AACA,SAAKjB,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BU,OAA5B,GAAsCa,IAAtC,CAA2C;AAAEC,MAAAA,KAAK,EAAEF,MAAT;AAAiBnB,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAlC,KAA3C,EACCmB,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,OAAZ;AACA,UAAIR,EAAE,GAAG,IAAT;AAEA,WAAKb,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BC,QAA5B,CAAqC,KAAKI,KAAL,CAAWC,OAAhD,EAAyDJ,IAAzD,CAA8D;AAAEC,QAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAnB,OAA9D,EAA4F,UAASF,KAAT,EAAgBP,MAAhB,EAAuB;AACjH,YAAI,CAACO,KAAL,EAAY;AACVN,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAqB,UAAAA,EAAE,CAACD,QAAH,CAAY;AAAEvB,YAAAA,OAAO,EAAGG;AAAZ,WAAZ;AACD;AACF,OALD;AAMA,WAAKoB,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAZD;AAaD;;AAEDG,EAAAA,aAAa,CAACU,MAAD,EAASN,OAAT,EAAkB;AAC7B,SAAKC,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKJ,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BU,OAA5B,CAAoCM,OAApC,EAA6CO,IAA7C,CAAkD;AAAEC,MAAAA,KAAK,EAAEF,MAAT;AAAiBnB,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAlC,KAAlD,EACCmB,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,OAAZ;AACA,UAAIR,EAAE,GAAG,IAAT;AAEA,WAAKb,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BC,QAA5B,CAAqC,KAAKI,KAAL,CAAWC,OAAhD,EAAyDJ,IAAzD,CAA8D;AAAEC,QAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAnB,OAA9D,EAA4F,UAASF,KAAT,EAAgBP,MAAhB,EAAuB;AACjH,YAAI,CAACO,KAAL,EAAY;AACVN,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAqB,UAAAA,EAAE,CAACD,QAAH,CAAY;AAAEvB,YAAAA,OAAO,EAAGG;AAAZ,WAAZ;AACD;AACF,OALD;AAMA,WAAKoB,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAZD;AAaD;;AAEDM,EAAAA,QAAQ,CAACY,SAAD,EAAYL,MAAZ,EAAoBM,SAApB,EAA+B;AACrC,SAAKX,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACI,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC,OAAlB;AAA2BuB,MAAAA,EAAE,EAAEF,SAA/B;AAA0CL,MAAAA,MAAM,EAAEA,MAAlD;AAA0DQ,MAAAA,GAAG,EAAEF;AAA/D,KAAZ;AACA,SAAKvB,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4B+B,iBAA5B,CAA8C,KAAK1B,KAAL,CAAWC,OAAzD,EAAkEqB,SAAlE,EAA6EL,MAA7E,EAAqFM,SAArF,EAAgGL,IAAhG,CAAqG;AAACpB,MAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAlB,KAArG,EACCmB,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,OAAZ;AACA,UAAIR,EAAE,GAAG,IAAT;AAEA,WAAKb,KAAL,CAAWd,QAAX,CAAoBS,OAApB,CAA4BC,QAA5B,CAAqC,KAAKI,KAAL,CAAWC,OAAhD,EAAyDJ,IAAzD,CAA8D;AAAEC,QAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC;AAAnB,OAA9D,EAA4F,UAASF,KAAT,EAAgBP,MAAhB,EAAuB;AACjH,YAAI,CAACO,KAAL,EAAY;AACVN,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAqB,UAAAA,EAAE,CAACD,QAAH,CAAY;AAAEvB,YAAAA,OAAO,EAAGG;AAAZ,WAAZ;AACD;AACF,OALD;AAMA,WAAKoB,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAZD;AAaD;;AAGDuB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,SAAS,EAAC,yCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAK3B,KAAL,CAAWI,OAAX,GACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAiB,MAAA,SAAS,EAAC,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAzC,CADF,GAEE,oBAAC,eAAD;AACF,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWX,OADlB;AAEF,MAAA,OAAO,EAAE,KAAKW,KAAL,CAAWC,OAFlB;AAGF,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAHpB;AAIF,MAAA,OAAO,EAAE,KAAKG,OAJZ;AAKF,MAAA,aAAa,EAAE,KAAKE,aALlB;AAMF,MAAA,gBAAgB,EAAE,KAAKC,gBANrB;AAOF,MAAA,QAAQ,EAAE,KAAKC,QAPb;AAQF,MAAA,QAAQ,EAAE,KAAKC,QARb;AASF,MAAA,YAAY,EAAE,KAAKV,KAAL,CAAWZ,YATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN,CADF,CADF,CADF,CADF;AAyBD;;AAxLyB;;AA2L5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContractUI from './SmartContractUI';\nimport Login from './LoginForm';\n\nclass App extends Component {\n\n  /*componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    this.setState({ web3: web3 });\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    let my = this;\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({ multisig });\n    web3.eth.getBalance(this.state.account).then(result => {\n      my.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n\n    this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n      if (!error) {\n        console.log(result);\n        my.setState({ balance : result });\n      } else {\n        console.log(error);\n      }\n    });\n    this.setState({ loading : false });\n  }\n  */\n  /*getEtherBalance = () => {\n    web3.eth.getBalance(this.state.account).then(result => {\n      this.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n  }*/\n  constructor(props) {\n    super(props);\n\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    const accounts = web3.eth.getAccounts();\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\n    let etherBalance;\n    let balance;\n    web3.eth.getBalance(accounts[0]).then(result => {\n      etherBalance = result;\n      console.log({ etherBalance : result});\n    });\n\n    multisig.methods.balances(accounts[0]).call({ from: accounts[0] }, function(error, result){\n      if (!error) {\n        console.log(result);\n        balance = result;\n      } else {\n        console.log(error);\n      }\n    });\n\n    this.state = { \n      web3: web3,\n      multisig: multisig,\n      account: accounts[0],\n      etherBalance: etherBalance,\n      balance: balance,\n      safetyKey: '',\n      nonce: '',\n      loading: false\n    };\n    this.deposit = this.deposit.bind(this);\n    this.depositSafely = this.depositSafely.bind(this);\n    this.getSafetyAddress = this.getSafetyAddress.bind(this);\n    this.getNonce = this.getNonce.bind(this);\n    this.transfer = this.transfer.bind(this);\n  }\n\n  async getSafetyAddress(address) {\n    this.setState({ loading: true })\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.safetyKeys(address).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          my.setState({ safetyKey : result });\n          res = result;\n        }\n        my.setState({ loading: false });\n      });\n    return res;\n  }\n\n  async getNonce(address) {\n    this.setState({ loading: true })\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.transactionNonces(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          my.setState({ nonce : result });\n          res = result;\n        }\n        my.setState({ loading: false });\n      });\n    return res;\n  }\n\n  deposit(amount) {\n    this.setState({ loading: true })\n    console.log({ account : this.state.account, amount : amount })\n    this.state.multisig.methods.deposit().send({ value: amount, from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);\n      let my = this;\n    \n      this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          console.log(result);\n          my.setState({ balance : result });\n        }\n      });\n      this.setState({ loading: false })\n    })\n  }\n\n  depositSafely(amount, address) {\n    this.setState({ loading: true })\n    this.state.multisig.methods.deposit(address).send({ value: amount, from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);\n      let my = this;\n    \n      this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          console.log(result);\n          my.setState({ balance : result });\n        }\n      });\n      this.setState({ loading: false })\n    })\n  }\n\n  transfer(addressTo, amount, signature) {\n    this.setState({ loading: true })\n    console.log({from: this.state.account, to: addressTo, amount: amount, sig: signature})\n    this.state.multisig.methods.verifyTransaction(this.state.account, addressTo, amount, signature).send({from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);\n      let my = this;\n    \n      this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          console.log(result);\n          my.setState({ balance : result });\n        }\n      });\n      this.setState({ loading: false })\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-fluid dappMainStyle\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\n              { this.state.loading \n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div> \n                : <SmartContractUI \n                balance={this.state.balance}\n                address={this.state.account} \n                safetyKey={this.state.safetyKey}\n                deposit={this.deposit}\n                depositSafely={this.depositSafely}\n                getSafetyAddress={this.getSafetyAddress}\n                getNonce={this.getNonce}\n                transfer={this.transfer}\n                etherBalance={this.state.etherBalance}\n                /> \n              }\n            </main>\n          </div>\n        </div>\n    \n      </div>  \n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}