{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/multisigEtherWallet/ModalTransferToken.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ReceiptComponent, InitialTxHashComponent } from '../sharedComponents/sharedComponents.js';\nimport '../Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"TransferFormToken\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToTransfer\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Amount\",\n  required: true,\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"recipientAddress\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Recipient\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"tokenTFA\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Token\",\n  required: true,\n  minLength: \"6\",\n  maxLength: \"6\",\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, \"Transfer\"));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalTransferToken extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'tokenTFA':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Token has to be 6 digits\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Public key has to be 42 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Public key has to start with '0x'\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n      document.getElementById(\"TransferFormToken\").reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex'); // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisig.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            var xhttp = new XMLHttpRequest();\n            var data = {\n              addressFrom: addrFrom,\n              addressTo: recipientAddress,\n              amount: amountToTransfer,\n              nonce: nonce,\n              token: tokenTFA\n            };\n\n            xhttp.onreadystatechange = () => {\n              if (xhttp.readyState === 4) {\n                // request is done\n                if (xhttp.status === 200) {\n                  // successfully\n                  var obj = JSON.parse(xhttp.responseText);\n\n                  if (obj.verified) {\n                    console.log({\n                      addressFrom: addrFrom,\n                      addressTo: recipientAddress,\n                      amount: amountToTransfer,\n                      signature: obj.signature\n                    }); // Build the transaction\n\n                    web3.eth.getGasPrice().then(gasPrice => {\n                      console.log('Current gas price: ', gasPrice);\n                      multisig.methods.verifyTransaction_26e(recipientAddress, amountToTransfer, obj.signature).estimateGas({\n                        gas: gasPrice,\n                        from: addrFrom\n                      }, function (error, gasAmount) {\n                        if (error) {\n                          console.log(error);\n                        } else {\n                          console.log('Estimate of gas usage: ', gasAmount);\n                          const txObject = {\n                            nonce: web3.utils.toHex(txCount),\n                            gasLimit: web3.utils.toHex(gasAmount),\n                            gasPrice: web3.utils.toHex(gasPrice),\n                            to: multisigAddress,\n                            data: multisig.methods.verifyTransaction_26e(recipientAddress, amountToTransfer, obj.signature).encodeABI()\n                          };\n                          console.log(txObject); // Sign the transaction\n\n                          const tx = new Tx(txObject, {\n                            chain: 'ropsten',\n                            hardfork: 'petersburg'\n                          });\n                          tx.sign(priv);\n                          const serializedTransaction = tx.serialize();\n                          const rawTx = '0x' + serializedTransaction.toString('hex');\n                          console.log(rawTx); // Broadcast the transaction\n\n                          web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                            console.log('Hash of transaction: ', hash);\n                            modal.setState({\n                              txHash: hash,\n                              hashReceipt: true,\n                              confirmationReceipt: false\n                            });\n                            modal.openModal();\n                          }).once('confirmation', function (confNumber, receipt) {\n                            console.log('Transaction confirmation number: ', confNumber);\n                            console.log('Second receipt of transaction: ', receipt);\n                            updateBalances();\n                            modal.setState({\n                              txReceipt: receipt,\n                              confirmationReceipt: true,\n                              hashReceipt: false\n                            });\n                            modal.openModal();\n                          }).on('error', function (error) {\n                            console.log(error);\n                          });\n                        }\n                      });\n                    });\n                  } else {\n                    alert(\"Wrong Token Submitted\");\n                  }\n                }\n              }\n            };\n\n            xhttp.open(\"POST\", \"http://localhost:5597/submit-transaction\", true);\n            xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhttp.send(JSON.stringify(data));\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      tokenTFA: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default ModalTransferToken;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/multisigEtherWallet/ModalTransferToken.js"],"names":["React","Component","ReactDOM","ReceiptComponent","InitialTxHashComponent","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalTransferToken","constructor","props","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","transfer","state","amountToTransfer","recipientAddress","privateKey","tokenTFA","getElementById","reset","openModal","isOpen","keyCode","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","xhttp","XMLHttpRequest","data","addressFrom","addressTo","amount","token","onreadystatechange","readyState","status","obj","JSON","parse","responseText","verified","signature","getGasPrice","then","gasPrice","verifyTransaction_26e","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","alert","open","setRequestHeader","send","stringify","render","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ReceiptComponent, InitialTxHashComponent} from '../sharedComponents/sharedComponents.js';\nimport '../Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"TransferFormToken\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"amountToTransfer\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Amount\" \n            required pattern=\"\\d+\"/>\n          <input type=\"text\" name=\"recipientAddress\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Recipient\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <input type=\"text\" name=\"tokenTFA\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Token\"\n            required minLength=\"6\" maxLength=\"6\" pattern=\"\\d+\"/>\n          <button type=\"submit\" className=\"smartButton\">Transfer</button>\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalTransferToken extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      tokenTFA: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'amountToTransfer': \n      if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }  \n      break;\n    case 'tokenTFA':\n      if (event.target.validity.tooShort) {\n          event.target.setCustomValidity(\"Token has to be 6 digits\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'recipientAddress':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Public key has to be 42 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Public key has to start with '0x'\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }     \n    default:\n      break;\n    }\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n    document.getElementById(\"TransferFormToken\").reset();        \n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n\n    let web3 = this.props.web3;\n    let multisig = this.props.multisig;\n    let multisigAddress = this.props.multisigAddress;\n    let modal = this;\n    let updateBalances = this.props.updateBalances;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    // Getting Ethereum transaction count\n    web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n      // Retrieving the current nonce inside the contract\n      multisig.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n            if (error) {\n                console.log(error)\n            } else {\n                \n                var xhttp = new XMLHttpRequest();\n                var data =\n                { addressFrom: addrFrom,\n                  addressTo: recipientAddress, \n                  amount: amountToTransfer,\n                  nonce: nonce,\n                  token: tokenTFA\n                };\n                xhttp.onreadystatechange = () => {\n                        if (xhttp.readyState === 4) { // request is done\n                            if (xhttp.status === 200) { // successfully\n                                var obj = JSON.parse(xhttp.responseText);\n                                if (obj.verified) {\n                                    console.log({ \n                                    addressFrom: addrFrom,\n                                    addressTo: recipientAddress, \n                                    amount: amountToTransfer, \n                                    signature: obj.signature});\n                                    // Build the transaction\n                                    web3.eth.getGasPrice().then((gasPrice) => {\n                                        console.log('Current gas price: ', gasPrice);    \n                                        multisig.methods.verifyTransaction_26e(recipientAddress, amountToTransfer, obj.signature).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                                            if (error) {\n                                                console.log(error);\n                                                \n                                            } else {\n                                            console.log('Estimate of gas usage: ', gasAmount);\n                                            \n                                            const txObject = {\n                                                nonce: web3.utils.toHex(txCount),\n                                                gasLimit: web3.utils.toHex(gasAmount), \n                                                gasPrice: web3.utils.toHex(gasPrice),\n                                                to: multisigAddress,\n                                                data: multisig.methods.verifyTransaction_26e(recipientAddress, amountToTransfer, obj.signature).encodeABI()\n                                            };\n                                            console.log(txObject);\n\n                                            // Sign the transaction\n                                            const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                                            tx.sign(priv);\n\n                                            const serializedTransaction = tx.serialize();\n                                            const rawTx = '0x' + serializedTransaction.toString('hex');\n                                            \n                                            console.log(rawTx);\n                                            \n                                            \n                                            // Broadcast the transaction\n                                            web3.eth.sendSignedTransaction(rawTx)\n                                            .once('transactionHash', function(hash){ \n                                                console.log('Hash of transaction: ', hash);\n                                                modal.setState({ \n                                                  txHash: hash,\n                                                  hashReceipt: true,\n                                                  confirmationReceipt: false                       \n                                                });\n                                                modal.openModal();\n                                            })\n                                            .once('confirmation', function(confNumber, receipt){ \n                                                console.log('Transaction confirmation number: ', confNumber);\n                                                console.log('Second receipt of transaction: ', receipt);\n                                                updateBalances();\n                                        \n                                                modal.setState({ \n                                                  txReceipt: receipt,\n                                                  confirmationReceipt: true, \n                                                  hashReceipt: false\n                                                });\n                                                modal.openModal(); \n                                            })\n                                            .on('error', function(error){ console.log(error) });\n                                            \n                                            }\n                                        })\n                                      })\n\n                                } else {\n                                    alert(\"Wrong Token Submitted\");\n                                }   \n                            }\n                        }\n                    };\n                xhttp.open(\"POST\", \"http://localhost:5597/submit-transaction\", true);\n                xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n                xhttp.send(JSON.stringify(data));\n                \n                    \n                }})\n            }\n    )\n    }\n  \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <InitialTxHashComponent transactionHash={this.state.txHash} />\n            : null} \n          {this.state.confirmationReceipt ?\n            <ReceiptComponent\n              transactionHash={this.state.txReceipt.transactionHash}\n              blockHash={this.state.txReceipt.blockHash}\n              blockNumber={this.state.txReceipt.blockNumber}\n              gasUsed={this.state.txReceipt.gasUsed}/>\n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalTransferToken;"]},"metadata":{},"sourceType":"module"}