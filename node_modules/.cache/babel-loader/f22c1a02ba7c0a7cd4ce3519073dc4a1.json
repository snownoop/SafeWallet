{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/multisigEtherWallet/ModalSetLimit.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nvar EthCrypto = require(\"eth-crypto\");\n\nvar BigNumber = require('bignumber.js');\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"limit\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Limit\",\n  required: true,\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"safetyPrivateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Safety Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, \"set daily limit\"));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalSetLimit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'limit':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'safetyPrivateKey':\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setDailyLimit(this.state.limit, this.state.privateKey, this.state.safetyPrivateKey);\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.setDailyLimit = (limit, privateKey, safetyPrivateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        multisig.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then(gasPrice => {\n              // The next few lines go around issues with big numbers\n              let x = new BigNumber(limit);\n              let val = web3.utils.fromWei(x.toString(10), 'ether');\n              let value = web3.utils.toWei(val.toString(), 'ether');\n              let msg = [{\n                type: \"address\",\n                value: addrFrom\n              }, {\n                type: \"uint256\",\n                value: value\n              }, {\n                type: \"uint256\",\n                value: nonce.toString()\n              }];\n              console.log(msg);\n\n              const _message = EthCrypto.hash.keccak256(msg);\n\n              console.log(\"message: \".concat(_message));\n\n              const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n              console.log(\"signature: \".concat(_signature));\n              multisig.methods.setDailyLimit(limit, _signature).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                  nonce: web3.utils.toHex(txCount),\n                  gasLimit: web3.utils.toHex(gasAmount * 2),\n                  // Estimate is not always correct\n                  gasPrice: web3.utils.toHex(gasPrice),\n                  // Pay Higher Price for testing purposes\n                  to: multisigAddress,\n                  data: multisig.methods.setDailyLimit(limit, _signature).encodeABI()\n                };\n                console.log(txObject); // Sign the transaction\n\n                const tx = new Tx(txObject, {\n                  chain: 'ropsten',\n                  hardfork: 'petersburg'\n                });\n                tx.sign(priv);\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                console.log(rawTx); // Broadcast the transaction\n\n                web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                  console.log('Hash of transaction: ', hash);\n                  modal.setState({\n                    txHash: hash,\n                    hashReceipt: true,\n                    confirmationReceipt: false\n                  });\n                  modal.openModal();\n                }).once('confirmation', function (confNumber, receipt) {\n                  console.log('Transaction confirmation number: ', confNumber);\n                  console.log('Transaction receipt: ', receipt);\n                  updateBalances();\n                  modal.setState({\n                    txReceipt: receipt,\n                    confirmationReceipt: true,\n                    hashReceipt: false\n                  });\n                  modal.openModal();\n                }).on('error', function (error) {\n                  console.log(error);\n                });\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      limit: '',\n      safetyPrivateKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), this.state.txHash) : null, this.state.confirmationReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Transaction confirmed! \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \"Please view the receipt:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), this.state.txReceipt.transactionHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), \"Block hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), this.state.txReceipt.blockHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), \"Block number is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), this.state.txReceipt.blockNumber, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), \"Gas used:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), this.state.txReceipt.gasUsed.toString('hex')) : null));\n  }\n\n}\n\nexport default ModalSetLimit;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/multisigEtherWallet/ModalSetLimit.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","EthCrypto","BigNumber","ModalTrigger","handleSubmit","handleInputChange","errors","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalSetLimit","constructor","props","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","setDailyLimit","state","limit","privateKey","safetyPrivateKey","openModal","isOpen","keyCode","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","getGasPrice","then","gasPrice","x","val","utils","fromWei","toString","toWei","msg","type","_message","hash","keccak256","_signature","sign","estimateGas","gas","gasAmount","txObject","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","serializedTransaction","serialize","rawTx","sendSignedTransaction","once","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AACA,IAAIC,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AAEA,MAAMI,YAAY,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA,iBAAf;AAAkCC,EAAAA;AAAlC,CAAD,KACb;AAAM,EAAA,EAAE,EAAC,aAAT;AAAuB,EAAA,QAAQ,EAAEF,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,OAAxB;AAAgC,EAAA,QAAQ,EAAEC,iBAA1C;AAA6D,EAAA,SAAS,EAAC,aAAvE;AAAqF,EAAA,WAAW,EAAC,OAAjG;AACE,EAAA,QAAQ,MADV;AACW,EAAA,OAAO,EAAC,MADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAGE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,YAAxB;AAAqC,EAAA,QAAQ,EAAEA,iBAA/C;AAAkE,EAAA,SAAS,EAAC,aAA5E;AAA0F,EAAA,WAAW,EAAC,aAAtG;AACE,EAAA,QAAQ,MADV;AACW,EAAA,SAAS,EAAC,IADrB;AAC0B,EAAA,SAAS,EAAC,IADpC;AACyC,EAAA,OAAO,EAAC,MADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EAKE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEA,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,YAA5G;AACE,EAAA,QAAQ,MADV;AACW,EAAA,SAAS,EAAC,IADrB;AAC0B,EAAA,SAAS,EAAC,IADpC;AACyC,EAAA,OAAO,EAAC,MADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,EAOE;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPF,CADR;;AAUA,MAAME,YAAY,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,SAAvB;AAAkCC,EAAAA,WAAlC;AAA+CC,EAAAA;AAA/C,CAAD,KAA8D;AAClF,SAAOf,QAAQ,CAACgB,YAAT,CACN;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAiC,IAAA,SAAS,EAAEH,SAA5C;AAAuD,IAAA,OAAO,EAAEC,WAAhE;AAA6E,IAAA,QAAQ,EAAC,GAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,GAAG,EAAEF,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,OAAO,EAAED,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,OAAO,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyD;AAAM,IAAA,CAAC,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,CADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CAJF,CADF,CADM,EAWNE,QAAQ,CAACC,IAXH,CAAP;AAaA,CAdD;;AAgBA,MAAMC,aAAN,SAA4BrB,KAAK,CAACC,SAAlC,CAA4C;AAE1CqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAcnBb,iBAdmB,GAcEc,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACC,cAAN;AAD6B,4BAELD,KAAK,CAACE,MAFD;AAAA,YAErBC,IAFqB,iBAErBA,IAFqB;AAAA,YAEfC,KAFe,iBAEfA,KAFe;;AAI7B,cAAQD,IAAR;AACA,aAAK,OAAL;AACE,cAAIH,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AACzCN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,uBAA/B;AACD,WAFD,MAEO;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF,aAAK,kBAAL;AACA,aAAK,YAAL;AACE,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AAClCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,qCAA/B;AACD,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAChDN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,0CAA/B;AACD,WAFM,MAEA;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF;AACE;AAnBF;;AAsBA,WAAKE,QAAL,CAAc;AAAE,SAACN,IAAD,GAAQC;AAAV,OAAd;AACD,KAzCkB;;AAAA,SA2CnBnB,YA3CmB,GA2CHe,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKS,aAAL,CAAmB,KAAKC,KAAL,CAAWC,KAA9B,EAAqC,KAAKD,KAAL,CAAWE,UAAhD,EAA4D,KAAKF,KAAL,CAAWG,gBAAvE;AACD,KA9CkB;;AAAA,SAgDnBC,SAhDmB,GAgDP,MAAM;AACnB,WAAKN,QAAL,CAAc;AACbO,QAAAA,MAAM,EAAE;AADK,OAAd;AAGE,KApDkB;;AAAA,SAsDnB3B,UAtDmB,GAsDN,MAAM;AACnB,WAAKoB,QAAL,CAAc;AACZO,QAAAA,MAAM,EAAE;AADI,OAAd;AAGC,KA1DkB;;AAAA,SA4DnBzB,SA5DmB,GA4DNS,KAAD,IAAW;AACxB,aAAOA,KAAK,CAACiB,OAAN,KAAkB,EAAlB,IAAwB,KAAK5B,UAAL,EAA/B;AACE,KA9DkB;;AAAA,SAgEnBG,WAhEmB,GAgEJQ,KAAD,IAAW;AACxB,UAAI,KAAKkB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBnB,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKb,UAAL;AACD,KAnEmB;;AAAA,SAqEnBqB,aArEmB,GAqEH,CAACE,KAAD,EAAQC,UAAR,EAAoBC,gBAApB,KAAyC;AACvD,UAAIM,IAAI,GAAG,KAAKrB,KAAL,CAAWqB,IAAtB;AACA,UAAIC,QAAQ,GAAG,KAAKtB,KAAL,CAAWsB,QAA1B;AACA,UAAIC,eAAe,GAAG,KAAKvB,KAAL,CAAWuB,eAAjC;AACA,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,cAAc,GAAG,KAAKzB,KAAL,CAAWyB,cAAhC;AACA,UAAIC,QAAQ,GAAG,KAAK1B,KAAL,CAAW2B,OAA1B;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYhB,UAAZ,EAAwB,KAAxB,CAAb;AAEAO,MAAAA,IAAI,CAACU,GAAL,CAASC,mBAAT,CAA6B,KAAKhC,KAAL,CAAW2B,OAAxC,EAAiD,CAACM,GAAD,EAAMC,OAAN,KAAkB;AAC/DZ,QAAAA,QAAQ,CAACa,OAAT,CAAiBC,iBAAjB,CAAmCV,QAAnC,EAA6CW,IAA7C,CAAkD;AAACP,UAAAA,IAAI,EAAEJ;AAAP,SAAlD,EAAoE,CAACY,KAAD,EAAQC,KAAR,KAAkB;AAClF,cAAID,KAAJ,EAAW;AACPE,YAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,WAFD,MAEO;AACP;AACAjB,YAAAA,IAAI,CAACU,GAAL,CAASW,WAAT,GAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AAE1C;AACA,kBAAIC,CAAC,GAAG,IAAI7D,SAAJ,CAAc6B,KAAd,CAAR;AACA,kBAAIiC,GAAG,GAAGzB,IAAI,CAAC0B,KAAL,CAAWC,OAAX,CAAmBH,CAAC,CAACI,QAAF,CAAW,EAAX,CAAnB,EAAmC,OAAnC,CAAV;AACA,kBAAI5C,KAAK,GAAGgB,IAAI,CAAC0B,KAAL,CAAWG,KAAX,CAAiBJ,GAAG,CAACG,QAAJ,EAAjB,EAAiC,OAAjC,CAAZ;AAEA,kBAAIE,GAAG,GAAG,CACR;AAAEC,gBAAAA,IAAI,EAAE,SAAR;AAAmB/C,gBAAAA,KAAK,EAAEqB;AAA1B,eADQ,EAER;AAAE0B,gBAAAA,IAAI,EAAE,SAAR;AAAmB/C,gBAAAA,KAAK,EAAEA;AAA1B,eAFQ,EAGR;AAAE+C,gBAAAA,IAAI,EAAE,SAAR;AAAmB/C,gBAAAA,KAAK,EAAEkC,KAAK,CAACU,QAAN;AAA1B,eAHQ,CAAV;AAMAT,cAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;;AACA,oBAAME,QAAQ,GAAGtE,SAAS,CAACuE,IAAV,CAAeC,SAAf,CAAyBJ,GAAzB,CAAjB;;AACAX,cAAAA,OAAO,CAACC,GAAR,oBAAwBY,QAAxB;;AAEA,oBAAMG,UAAU,GAAGzE,SAAS,CAAC0E,IAAV,CAAe1C,gBAAf,EAAiCsC,QAAjC,CAAnB;;AAEAb,cAAAA,OAAO,CAACC,GAAR,sBAA0Be,UAA1B;AACAlC,cAAAA,QAAQ,CAACa,OAAT,CAAiBxB,aAAjB,CAA+BE,KAA/B,EAAsC2C,UAAtC,EAAkDE,WAAlD,CAA8D;AAACC,gBAAAA,GAAG,EAAEf,QAAN;AAAgBd,gBAAAA,IAAI,EAAEJ;AAAtB,eAA9D,EAA+F,UAASY,KAAT,EAAgBsB,SAAhB,EAA2B;AACtHpB,gBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,QAAnC;AACAJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCmB,SAAvC;AACA,sBAAMC,QAAQ,GAAG;AACbtB,kBAAAA,KAAK,EAAElB,IAAI,CAAC0B,KAAL,CAAWe,KAAX,CAAiB5B,OAAjB,CADM;AAEb6B,kBAAAA,QAAQ,EAAE1C,IAAI,CAAC0B,KAAL,CAAWe,KAAX,CAAiBF,SAAS,GAAC,CAA3B,CAFG;AAE4B;AACzChB,kBAAAA,QAAQ,EAAEvB,IAAI,CAAC0B,KAAL,CAAWe,KAAX,CAAiBlB,QAAjB,CAHG;AAGyB;AACtCoB,kBAAAA,EAAE,EAAEzC,eAJS;AAKb0C,kBAAAA,IAAI,EAAE3C,QAAQ,CAACa,OAAT,CAAiBxB,aAAjB,CAA+BE,KAA/B,EAAsC2C,UAAtC,EAAkDU,SAAlD;AALO,iBAAjB;AAOA1B,gBAAAA,OAAO,CAACC,GAAR,CAAYoB,QAAZ,EAVsH,CAYtH;;AACA,sBAAMM,EAAE,GAAG,IAAIvF,EAAJ,CAAOiF,QAAP,EAAiB;AAAEO,kBAAAA,KAAK,EAAE,SAAT;AAAoBC,kBAAAA,QAAQ,EAAE;AAA9B,iBAAjB,CAAX;AACAF,gBAAAA,EAAE,CAACV,IAAH,CAAQ7B,IAAR;AAEA,sBAAM0C,qBAAqB,GAAGH,EAAE,CAACI,SAAH,EAA9B;AACA,sBAAMC,KAAK,GAAG,OAAOF,qBAAqB,CAACrB,QAAtB,CAA+B,KAA/B,CAArB;AAEAT,gBAAAA,OAAO,CAACC,GAAR,CAAY+B,KAAZ,EAnBsH,CAqBtH;;AACAnD,gBAAAA,IAAI,CAACU,GAAL,CAAS0C,qBAAT,CAA+BD,KAA/B,EACCE,IADD,CACM,iBADN,EACyB,UAASpB,IAAT,EAAc;AACnCd,kBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCa,IAArC;AACA9B,kBAAAA,KAAK,CAACd,QAAN,CAAe;AACbiE,oBAAAA,MAAM,EAAErB,IADK;AAEbsB,oBAAAA,WAAW,EAAE,IAFA;AAGbC,oBAAAA,mBAAmB,EAAE;AAHR,mBAAf;AAKArD,kBAAAA,KAAK,CAACR,SAAN;AACH,iBATD,EAUC0D,IAVD,CAUM,cAVN,EAUsB,UAASI,UAAT,EAAqBC,OAArB,EAA6B;AAC/CvC,kBAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDqC,UAAjD;AACAtC,kBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCsC,OAArC;AACAtD,kBAAAA,cAAc;AAEdD,kBAAAA,KAAK,CAACd,QAAN,CAAe;AACbsE,oBAAAA,SAAS,EAAED,OADE;AAEbF,oBAAAA,mBAAmB,EAAE,IAFR;AAGbD,oBAAAA,WAAW,EAAE;AAHA,mBAAf;AAKApD,kBAAAA,KAAK,CAACR,SAAN;AACH,iBArBD,EAsBCiE,EAtBD,CAsBI,OAtBJ,EAsBa,UAAS3C,KAAT,EAAe;AAAEE,kBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAAoB,iBAtBlD;AAuBH,eA7CD;AA8CD,aAlEC;AAmEH;AACF,SAzEC;AA0EH,OA3ED;AA4ED,KA1JkB;;AAElB,SAAK1B,KAAL,GAAa;AACV+D,MAAAA,MAAM,EAAE,EADE;AAEVK,MAAAA,SAAS,EAAE,EAFD;AAGVnE,MAAAA,KAAK,EAAE,EAHG;AAIVE,MAAAA,gBAAgB,EAAE,EAJR;AAKVD,MAAAA,UAAU,EAAE,EALF;AAMZG,MAAAA,MAAM,EAAE,KANI;AAOV2D,MAAAA,WAAW,EAAE,KAPH;AAQVC,MAAAA,mBAAmB,EAAC;AARV,KAAb;AAUA;;AAgJDK,EAAAA,MAAM,GAAG;AAER,WACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AACC,MAAA,YAAY,EAAE,KAAKhG,YADpB;AAEC,MAAA,iBAAiB,EAAE,KAAKC,iBAFzB;AAGC,MAAA,MAAM,EAAE,KAAKyB,KAAL,CAAWxB,MAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAME,KAAKwB,KAAL,CAAWK,MAAX,IACA,oBAAC,YAAD;AACC,MAAA,UAAU,EAAE,KAAK3B,UADlB;AAEC,MAAA,SAAS,EAAE,KAAKE,SAFjB;AAGC,MAAA,WAAW,EAAE,KAAKC,WAHnB;AAIC,MAAA,QAAQ,EAAE0F,CAAC,IAAI,KAAKhE,SAAL,GAAiBgE,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,KAAKvE,KAAL,CAAWgE,WAAX,GACE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/C,EACC,KAAKhE,KAAL,CAAW+D,MADZ,CADF,GAII,IATN,EAUG,KAAK/D,KAAL,CAAWiE,mBAAX,GACC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlD,8BAA+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/E,0BACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB,EAEC,KAAKjE,KAAL,CAAWoE,SAAX,CAAqBI,eAFtB,EAEsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFtC,oBAGc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHd,EAIC,KAAKxE,KAAL,CAAWoE,SAAX,CAAqBK,SAJtB,EAIgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJhC,sBAKgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALhB,EAMC,KAAKzE,KAAL,CAAWoE,SAAX,CAAqBM,WANtB,EAMkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANlC,eAOS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPT,EAQC,KAAK1E,KAAL,CAAWoE,SAAX,CAAqBO,OAArB,CAA6BtC,QAA7B,CAAsC,KAAtC,CARD,CADD,GAWG,IArBN,CAPF,CADH;AAmCA;;AAnMyC;;AAsM5C,eAAenD,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\nvar EthCrypto = require(\"eth-crypto\");\nvar BigNumber = require('bignumber.js');\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"limit\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Limit\"\n            required pattern=\"\\d+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <input type=\"text\" name=\"safetyPrivateKey\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Safety Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <button type=\"submit\" className=\"smartButton\">set daily limit</button>\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalSetLimit extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      limit: '',\n      safetyPrivateKey: '',\n      privateKey: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'limit': \n      if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }  \n      break;\n    case 'safetyPrivateKey':\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    default:\n      break;\n    }\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setDailyLimit(this.state.limit ,this.state.privateKey, this.state.safetyPrivateKey);\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  setDailyLimit = (limit, privateKey, safetyPrivateKey) => {\n    let web3 = this.props.web3;\n    let multisig = this.props.multisig;\n    let multisigAddress = this.props.multisigAddress;\n    let modal = this;\n    let updateBalances = this.props.updateBalances;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        multisig.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n            if (error) {\n                console.log(error)\n            } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then((gasPrice) => {\n\n            // The next few lines go around issues with big numbers\n            let x = new BigNumber(limit);\n            let val = web3.utils.fromWei(x.toString(10), 'ether');\n            let value = web3.utils.toWei(val.toString(), 'ether');\n            \n            let msg = [\n              { type: \"address\", value: addrFrom},\n              { type: \"uint256\", value: value},\n              { type: \"uint256\", value: nonce.toString()}\n            ];\n\n            console.log(msg);\n            const _message = EthCrypto.hash.keccak256(msg); \n            console.log(`message: ${_message}`);\n            \n            const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n            console.log(`signature: ${_signature}`);\n            multisig.methods.setDailyLimit(limit, _signature).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount*2), // Estimate is not always correct\n                    gasPrice: web3.utils.toHex(gasPrice), // Pay Higher Price for testing purposes\n                    to: multisigAddress,\n                    data: multisig.methods.setDailyLimit(limit, _signature).encodeABI()\n                };\n                console.log(txObject);\n\n                // Sign the transaction\n                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                tx.sign(priv);\n\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                \n                console.log(rawTx);\n\n                // Broadcast the transaction\n                web3.eth.sendSignedTransaction(rawTx)\n                .once('transactionHash', function(hash){ \n                    console.log('Hash of transaction: ', hash)\n                    modal.setState({ \n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false                       \n                    });\n                    modal.openModal();\n                })\n                .once('confirmation', function(confNumber, receipt){ \n                    console.log('Transaction confirmation number: ', confNumber) \n                    console.log('Transaction receipt: ', receipt)\n                    updateBalances();\n                    \n                    modal.setState({ \n                      txReceipt: receipt,\n                      confirmationReceipt: true, \n                      hashReceipt: false\n                    });\n                    modal.openModal(); \n                })\n                .on('error', function(error){ console.log(error) });\n            })\n          })\n        }\n      })\n    })\n  } \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <p className=\"modalTextTx\">Transaction hash is:<br/>\n            {this.state.txHash}\n            </p> \n            : null} \n          {this.state.confirmationReceipt ?\n            <p className=\"modalTextTx\">Transaction confirmed! <br/>Please view the receipt:<br/>\n            Transaction hash is:<br/>\n            {this.state.txReceipt.transactionHash}<br/>\n            Block hash is:<br/>\n            {this.state.txReceipt.blockHash}<br/>\n            Block number is:<br/>\n            {this.state.txReceipt.blockNumber}<br/>\n            Gas used:<br/>\n            {this.state.txReceipt.gasUsed.toString('hex')}\n            </p> \n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalSetLimit;"]},"metadata":{},"sourceType":"module"}