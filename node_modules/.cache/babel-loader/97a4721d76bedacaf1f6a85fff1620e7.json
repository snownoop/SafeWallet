{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalRegisterSafetyAddress.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"safetyPubKeY\",\n  onChange: handleInputChange,\n  className: \"smartInput2\",\n  placeholder: \"Safety Public Key\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput2\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Register Safe key\"));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalRegisterSafetyAddress extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'safetyPubKeY':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Public key has to be 42 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Public key has to start with '0x'\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.registerSafeAddress(this.state.safetyPubKeY, this.state.privateKey);\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.registerSafeAddress = (safetyPubKeY, privateKey) => {\n      let web3 = this.props.web3;\n      let multisigERC20Token = this.props.multisigERC20Token;\n      let multisigERC20Address = this.props.multisigERC20Address;\n      let modal = this;\n      let tokenSymbol = this.props.tokenSymbol;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex'); // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisigERC20Token.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then(gasPrice => {\n              console.log('Current gas price: ', gasPrice);\n              multisigERC20Token.methods.registerSafeAddress(safetyPubKeY, tokenSymbol).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                if (error) {\n                  console.log(error);\n                } else {\n                  console.log('Estimate of gas usage: ', gasAmount);\n                  const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount * 3),\n                    // For testing, so transactions accepted faster\n                    gasPrice: web3.utils.toHex(gasPrice * 3),\n                    to: multisigERC20Address,\n                    data: multisigERC20Token.methods.registerSafeAddress(safetyPubKeY, tokenSymbol).encodeABI()\n                  };\n                  console.log(txObject); // Sign the transaction\n\n                  const tx = new Tx(txObject, {\n                    chain: 'ropsten',\n                    hardfork: 'petersburg'\n                  });\n                  tx.sign(priv);\n                  const serializedTransaction = tx.serialize();\n                  const rawTx = '0x' + serializedTransaction.toString('hex');\n                  console.log(rawTx); // Broadcast the transaction\n\n                  web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                    console.log('Hash of transaction: ', hash);\n                    modal.setState({\n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false\n                    });\n                    modal.openModal();\n                  }).once('confirmation', function (confNumber, receipt) {\n                    console.log('Transaction confirmation number: ', confNumber);\n                    console.log('Second receipt of transaction: ', receipt);\n                    modal.setState({\n                      txReceipt: receipt,\n                      confirmationReceipt: true,\n                      hashReceipt: false\n                    });\n                    modal.openModal();\n                  }).on('error', function (error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      safetyPubKeY: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Transaction hash is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), this.state.txHash) : null, this.state.confirmationReceipt ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Transaction confirmed!\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"modalTextBlack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Please view the receipt:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"modalTextBlack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Transaction hash is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), this.state.txReceipt.transactionHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"modalTextBlack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Block hash is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), this.state.txReceipt.blockHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"modalTextBlack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Block number is:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), this.state.txReceipt.blockNumber, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"modalTextBlack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Gas used:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), parseInt(this.state.txReceipt.gasUsed).toString())) : null));\n  }\n\n}\n\nexport default ModalRegisterSafetyAddress;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalRegisterSafetyAddress.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalRegisterSafetyAddress","constructor","props","event","preventDefault","target","name","value","validity","tooShort","setCustomValidity","patternMismatch","setState","registerSafeAddress","state","safetyPubKeY","privateKey","openModal","isOpen","keyCode","modalNode","contains","web3","multisigERC20Token","multisigERC20Address","modal","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","getGasPrice","then","gasPrice","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","n","color","transactionHash","blockHash","blockNumber","parseInt","gasUsed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"safetyPubKeY\" onChange={handleInputChange} className=\"smartInput2\" placeholder=\"Safety Public Key\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput2\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <button type=\"submit\" className=\"smartButton\">Register Safe key</button>\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalRegisterSafetyAddress extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      safetyPubKeY: '',\n      privateKey: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'safetyPubKeY':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Public key has to be 42 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Public key has to start with '0x'\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }     \n    default:\n      break;\n    }\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.registerSafeAddress(this.state.safetyPubKeY, this.state.privateKey);\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  registerSafeAddress = (safetyPubKeY, privateKey) => {\n    \n    let web3 = this.props.web3;\n    let multisigERC20Token = this.props.multisigERC20Token;\n    let multisigERC20Address = this.props.multisigERC20Address;\n    let modal = this;\n    let tokenSymbol = this.props.tokenSymbol;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    // Getting Ethereum transaction count\n    web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n      // Retrieving the current nonce inside the contract\n      multisigERC20Token.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n            if (error) {\n                console.log(error)\n            } else {\n                \n                // Build the transaction\n                web3.eth.getGasPrice().then((gasPrice) => {\n                    console.log('Current gas price: ', gasPrice);    \n                    multisigERC20Token.methods.registerSafeAddress(safetyPubKeY, tokenSymbol).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                        if (error) {\n                            console.log(error);\n                            \n                        } else {\n                        console.log('Estimate of gas usage: ', gasAmount);\n                        \n                        const txObject = {\n                            nonce: web3.utils.toHex(txCount),\n                            gasLimit: web3.utils.toHex(gasAmount*3), // For testing, so transactions accepted faster\n                            gasPrice: web3.utils.toHex(gasPrice*3),\n                            to: multisigERC20Address,\n                            data: multisigERC20Token.methods.registerSafeAddress(safetyPubKeY, tokenSymbol).encodeABI()\n                        };\n                        console.log(txObject);\n\n                        // Sign the transaction\n                        const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                        tx.sign(priv);\n\n                        const serializedTransaction = tx.serialize();\n                        const rawTx = '0x' + serializedTransaction.toString('hex');\n                        \n                        console.log(rawTx);\n                        \n                        // Broadcast the transaction\n                        web3.eth.sendSignedTransaction(rawTx)\n                        .once('transactionHash', function(hash){ \n                            console.log('Hash of transaction: ', hash);\n                            modal.setState({ \n                              txHash: hash,\n                              hashReceipt: true,\n                              confirmationReceipt: false                       \n                            });\n                            modal.openModal();\n                        })\n                        .once('confirmation', function(confNumber, receipt){ \n                            console.log('Transaction confirmation number: ', confNumber);\n                            console.log('Second receipt of transaction: ', receipt);\n                    \n                            modal.setState({ \n                              txReceipt: receipt,\n                              confirmationReceipt: true, \n                              hashReceipt: false\n                            });\n                            modal.openModal(); \n                        })\n                        .on('error', function(error){ console.log(error) });\n                        \n                        }\n                    })\n                })\n            }\n    })\n    })\n  } \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <p className=\"modalTextTx\"><span style={{color: 'black'}}>Transaction hash is:</span><br/>\n            {this.state.txHash}\n            </p> \n            : null} \n          {this.state.confirmationReceipt ?\n            <React.Fragment>\n            <p className=\"modalTextTx\">Transaction confirmed!</p> \n            <hr/>\n            <p className=\"modalTextTx\">\n            <span className=\"modalTextBlack\">Please view the receipt:</span><br/>\n            <span className=\"modalTextBlack\">Transaction hash is:</span><br/>\n            {this.state.txReceipt.transactionHash}<br/>\n            <span className=\"modalTextBlack\">Block hash is:</span><br/>\n            {this.state.txReceipt.blockHash}<br/>\n            <span className=\"modalTextBlack\">Block number is:</span><br/>\n            {this.state.txReceipt.blockNumber}<br/>\n            <span className=\"modalTextBlack\">Gas used:</span><br/>\n            {(parseInt(this.state.txReceipt.gasUsed)).toString()}\n            </p> \n            </React.Fragment>\n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalRegisterSafetyAddress;"]},"metadata":{},"sourceType":"module"}