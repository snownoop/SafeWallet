{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract';\nimport './css/ButtonGroup.css';\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateBalances = () => {\n      let etherBalance = null;\n      let contractBalance = null;\n      this.state.multisig.methods.balances(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          contractBalance = balance;\n          this.state.web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n            if (error) {\n              console.log(error, 'Something went wrong');\n            } else {\n              etherBalance = balance;\n              console.log(etherBalance);\n              console.log('Ether', etherBalance);\n              this.setState({\n                contractBalance: contractBalance,\n                etherBalance: etherBalance\n              });\n              console.log('New etherBalance : ', this.state.etherBalance);\n              console.log('New contractBalance : ', this.state.contractBalance);\n            }\n          });\n        }\n      });\n    };\n\n    this.onHandleClick = e => {\n      e.preventDefault();\n      var current = document.getElementsByClassName(\"active\");\n      current[0].className = current[0].className.replace(\" active\", \"\");\n      e.target.className += \" active\";\n      const name = e.target.name;\n      console.log(name);\n\n      switch (name) {\n        case 'Ethereum':\n          if (this.state.Ethereum != true) {\n            this.setState({\n              'Ethereum': true\n            });\n          }\n\n          break;\n\n        case 'ERC20':\n          if (this.state.Ethereum == true) {\n            this.setState({\n              'Ethereum': false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      console.log(this.state.Ethereum);\n    };\n\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: '',\n      etherBalance: '',\n      contractBalance: '',\n      ethereum: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          etherBalance: balance\n        });\n        console.log('Account ether balance: ', this.state.etherBalance);\n      }\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          contractBalance: balance\n        });\n        console.log('The contract balance of account is: ', this.state.contractBalance);\n      }\n    });\n    this.interval = setInterval(this.updateBalances, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"smart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btnGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttonInGroup active\",\n      name: \"Ethereum\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Ethereum\"), React.createElement(\"button\", {\n      className: \"buttonInGroup\",\n      name: \"ERC20\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"ERC20\")), React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.state.etherBalance,\n      contractBalance: this.state.contractBalance,\n      updateBalances: this.updateBalances,\n      web3: this.state.web3,\n      multisig: this.state.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","SmartContract","BlockchainData","constructor","props","updateBalances","etherBalance","contractBalance","state","multisig","methods","balances","etherAddress","call","from","error","balance","console","log","web3","eth","getBalance","setState","onHandleClick","e","preventDefault","current","document","getElementsByClassName","className","replace","target","name","Ethereum","ethereum","getDerivedStateFromProps","componentDidMount","Contract","interval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract'; \nimport './css/ButtonGroup.css';\n\n\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/ \nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: '',\n\t\t\tetherBalance: '',\n\t\t\tcontractBalance: '',\n\t\t\tethereum: true\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tweb3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t        this.setState({ etherBalance: balance });\n\t    \t\tconsole.log('Account ether balance: ', this.state.etherBalance);\n\t    \t}\n\t\t\t})\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ contractBalance: balance });\n\t\t       \tconsole.log('The contract balance of account is: ', this.state.contractBalance);\n\t\t    }\n\t\t})\n\n\t\tthis.interval = setInterval(this.updateBalances, 15000);\n  \t}\n\n  \tcomponentWillUnmount() {\n\t   \tclearInterval(this.interval);\n\t}\n\n  \tupdateBalances = () => {\n  \t\tlet etherBalance = null;\n  \t\tlet contractBalance = null\n\t    this.state.multisig.methods.balances(this.state.etherAddress).call({ from: this.state.etherAddress }, (error, balance) => {\n        \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t    \t\tcontractBalance = balance;\n\t    \t\tthis.state.web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t  \t\t\tif (error) {\n\t\t  \t\t\t\tconsole.log(error, 'Something went wrong');\n\t\t  \t\t\t} else {\n\t\t\t\t\t\tetherBalance = balance;\n\t\t\t\t\t\tconsole.log(etherBalance);\n\t\t\t\t\t\tconsole.log('Ether',etherBalance);\n\t\t\t      \t\tthis.setState({ contractBalance : contractBalance, etherBalance : etherBalance});\n\t\t\t      \t\tconsole.log('New etherBalance : ', this.state.etherBalance);\n\t\t\t      \t\tconsole.log('New contractBalance : ', this.state.contractBalance);\n\t\t\t      \t}\n\t\t\t      }\n\t\t\t    );\n\t      \t}\n      \t});\n  \t}\n\n  \tonHandleClick = (e) => {\n  \t\te.preventDefault();\n  \t\tvar current = document.getElementsByClassName(\"active\");\n\t\tcurrent[0].className = current[0].className.replace(\" active\", \"\");\n\t\te.target.className += \" active\";\n\t\tconst name = e.target.name;\n\n\t\tconsole.log(name);\n\n\t    switch (name) {\n\t    case 'Ethereum': \n\t      if (this.state.Ethereum != true) {\n\t\t\tthis.setState({ 'Ethereum': true });\n\t      }\n\t      break;\n\t    case 'ERC20': \n\t      if (this.state.Ethereum == true) {\n\t\t\tthis.setState({ 'Ethereum': false });\n\t      }\n\t      break;   \n\t    default:\n\t      break;\n\t    }\n\t    console.log(this.state.Ethereum);\n  \t}\n  \t\n\trender() {\n  \t  \treturn (\n      \t\t<div id=\"content\" className =\"smart\">\n      \t\t\t<div className=\"btnGroup\">\n\t\t\t\t  \t<button className=\"buttonInGroup active\" name=\"Ethereum\" onClick={this.onHandleClick}>Ethereum</button>\n\t\t\t\t  \t<button className=\"buttonInGroup\" name=\"ERC20\" onClick={this.onHandleClick}>ERC20</button>\n      \t\t\t</div>\n        \t\t<SmartContract \n        \t\t\taddress={this.props.etherAddress} \n        \t\t\tetherBalance={this.state.etherBalance}\n        \t\t\tcontractBalance={this.state.contractBalance}\n        \t\t\tupdateBalances={this.updateBalances}\n        \t\t\tweb3={this.state.web3}\n        \t\t\tmultisig={this.state.multisig} \n        \t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}