{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: ''\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    console.log(web3);\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        console.log('The contract balance of acc 1: ', balance.toString(10));\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","BlockchainData","constructor","props","state","web3","multisig","etherAddress","getDerivedStateFromProps","componentDidMount","setState","console","log","eth","Contract","methods","balances","call","from","error","balance","toString","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,eAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,UAA/C;;AAEA,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AAEtCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,IAAI,EAAE,EADM;AAEZC,MAAAA,QAAQ,EAAE,EAFE;AAGZC,MAAAA,YAAY,EAAE;AAHF,KAAb;AAKA;;AACD,SAAOC,wBAAP,CAAgCL,KAAhC,EAAuCC,KAAvC,EAA8C;AAC1C,WAAO;AAACG,MAAAA,YAAY,EAAEJ,KAAK,CAACI;AAArB,KAAP;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AACnB,UAAMJ,IAAI,GAAG,IAAIT,IAAJ,CAAS,+DAAT,CAAb;AACA,SAAKc,QAAL,CAAc;AAAEL,MAAAA,IAAI,EAAEA;AAAR,KAAd;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,UAAMC,QAAQ,GAAG,IAAID,IAAI,CAACQ,GAAL,CAASC,QAAb,CAAsBf,YAAtB,EAAoCC,gBAApC,CAAjB;AACF,SAAKU,QAAL,CAAc;AAAEJ,MAAAA,QAAQ,EAAEA;AAAZ,KAAd;AACAA,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,QAAjB,CAA0B,KAAKZ,KAAL,CAAWG,YAArC,EAAmDU,IAAnD,CAAwD;AAACC,MAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWG;AAAlB,KAAxD,EAAyF,CAACY,KAAD,EAAQC,OAAR,KAAoB;AAC1G,UAAID,KAAJ,EAAW;AACPR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH,OAFD,MAEO;AACHR,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA8CQ,OAAO,CAACC,QAAR,CAAiB,EAAjB,CAA9C;AACH;AACL,KANC;AASE;;AACHC,EAAAA,MAAM,GAAG;AACJ,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKH;;AApCoC;;AAuCvC,eAAerB,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\n\nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: ''\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconsole.log(web3);\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t    if (error) {\n\t        console.log(error)\n\t    } else {\n\t        console.log('The contract balance of acc 1: ',balance.toString(10));\n\t    }\n})\n\n\n  \t}\n\trender() {\n  \t  \treturn (\n      \t\t<div>\n        \n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}