{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract';\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getEtherBalance = () => {\n      this.state.web3.eth.getBalance(this.state.etherAddress).then((error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            etherBalance: balance\n          });\n          console.log('New etherBalance : ', balance);\n        }\n      });\n    };\n\n    this.getContractBalance = () => {\n      this.state.multisig.methods.balances(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            contractBalance: balance\n          });\n          console.log('New contractBalance : ', balance);\n        }\n      });\n    };\n\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: '',\n      etherBalance: '',\n      contractBalance: ''\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          etherBalance: balance\n        });\n        console.log('Account ether balance: ', this.state.etherBalance);\n      }\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          contractBalance: balance\n        });\n        console.log('The contract balance of account is: ', this.state.contractBalance);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.state.etherBalance,\n      contractBalance: this.state.contractBalance,\n      getEtherBalance: this.getEtherBalance,\n      getContractBalance: this.getContractBalance,\n      web3: this.state.web3,\n      multisig: this.state.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","SmartContract","BlockchainData","constructor","props","getEtherBalance","state","web3","eth","getBalance","etherAddress","then","error","balance","console","log","setState","etherBalance","getContractBalance","multisig","methods","balances","call","from","contractBalance","getDerivedStateFromProps","componentDidMount","Contract","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract'; \n\nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: '',\n\t\t\tetherBalance: '',\n\t\t\tcontractBalance: ''\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tweb3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t        this.setState({ etherBalance: balance });\n\t    \t\tconsole.log('Account ether balance: ', this.state.etherBalance);\n\t    \t}\n\t\t\t})\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ contractBalance: balance });\n\t\t       \tconsole.log('The contract balance of account is: ', this.state.contractBalance);\n\t\t    }\n\t\t})\n  \t}\n\n  \tgetEtherBalance = () => {\n\t    this.state.web3.eth.getBalance(this.state.etherAddress).then((error, balance) => {\n\t    \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t      \t\tthis.setState({ etherBalance : balance});\n\t      \t\tconsole.log('New etherBalance : ', balance);\n\t      \t}\n\t    });\n\t}\n\n  \tgetContractBalance = () => {\n    \tthis.state.multisig.methods.balances(this.state.etherAddress).call({ from: this.state.etherAddress }, (error, balance) => {\n        \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t      \t\tthis.setState({ contractBalance : balance});\n\t      \t\tconsole.log('New contractBalance : ', balance);\n\t      \t}\n      \t});\n  \t}\n\trender() {\n  \t  \treturn (\n      \t\t<div>\n        \t\t<SmartContract \n        \t\t\taddress={this.props.etherAddress} \n        \t\t\tetherBalance={this.state.etherBalance}\n        \t\t\tcontractBalance={this.state.contractBalance}\n        \t\t\tgetEtherBalance={this.getEtherBalance}\n        \t\t\tgetContractBalance={this.getContractBalance}\n        \t\t\tweb3={this.state.web3}\n        \t\t\tmultisig={this.state.multisig} \n        \t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}