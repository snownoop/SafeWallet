{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalToken.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange\n}) => React.createElement(\"form\", {\n  id: \"TokenForm\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, \"enable 2fa\"));\n\nconst ModalContent = ({\n  toggle,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalToken extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.generateSecret();\n      this.toggle();\n    };\n\n    this.toggle = () => {\n      if (this.state.isOpen) {\n        this.setState({\n          secret: ''\n        });\n      }\n\n      this.setState({\n        isOpen: !this.state.isOpen,\n        notVerified: true\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.toggle();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.toggle();\n    };\n\n    this.tokenInputHandler = event => {\n      this.setState({\n        token: event.target.value\n      });\n    };\n\n    this.generateSecret = () => {\n      this.props.web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        if (err) {\n          console.log(err);\n        } else {\n          let signatureObj = this.props.web3.eth.accounts.sign(\"Token \".concat(txCount), \"0x\".concat(this.state.privateKey));\n          let addrRecover = this.props.web3.eth.accounts.recover(\"Token \".concat(txCount), signatureObj.signature);\n          var xhttp = new XMLHttpRequest();\n          var data = {\n            address: this.props.address,\n            signature: signatureObj.signature\n          };\n          console.log(data);\n          console.log(addrRecover);\n\n          xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) {\n              // request is done\n              if (xhttp.status === 200) {\n                // successfully\n                var obj = JSON.parse(xhttp.responseText);\n                console.log(obj.secret);\n\n                if (obj.secret == null) {//this.setState({ secret: 'Wrong private key' });\n                } else {\n                  this.setState({\n                    secret: obj.secret\n                  });\n                }\n              }\n            }\n          };\n\n          xhttp.open(\"POST\", \"http://localhost:5597/totp-generate\", true);\n          xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n          xhttp.send(JSON.stringify(data));\n        }\n      });\n    };\n\n    this.verifyToken = () => {\n      var xhttp = new XMLHttpRequest();\n      var data = {\n        token: this.state.token,\n        address: this.props.address\n      };\n\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4) {\n          // request is done\n          if (xhttp.status === 200) {\n            // successfully\n            var obj = JSON.parse(xhttp.responseText);\n            console.log(obj.verified);\n            this.setState({\n              goodToken: obj.verified\n            });\n          }\n        }\n      };\n\n      console.log(data);\n      xhttp.open(\"POST\", \"http://localhost:5597/totp-verify\", true);\n      xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhttp.send(JSON.stringify(data));\n      this.setState({\n        notVerified: false\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      token: '',\n      secret: '',\n      privateKey: '',\n      notVerified: true,\n      goodToken: false\n    };\n  }\n\n  render() {\n    const verifyTokenBtn = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"token\",\n      onChange: this.tokenInputHandler,\n      className: \"modalInput\",\n      placeholder: \"Token\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.verifyToken,\n      className: \"modalButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"submit token\"));\n    const correctToken = React.createElement(\"p\", {\n      className: \"successToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"The token submitted is correct.\");\n    const incorrectToken = React.createElement(\"p\", {\n      className: \"failToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"The token submitted is incorrect.\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      toggle: this.toggle,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Two-factor authentication\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"modalImg\",\n      src: this.state.secret,\n      alt: \"Generic placeholder image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), this.state.notVerified ? verifyTokenBtn : this.state.goodToken ? correctToken : incorrectToken));\n  }\n\n}\n\nexport default ModalToken;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalToken.js"],"names":["React","Component","ReactDOM","ModalTrigger","handleSubmit","handleInputChange","ModalContent","toggle","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalToken","constructor","props","event","preventDefault","target","name","value","validity","tooShort","setCustomValidity","patternMismatch","setState","generateSecret","state","isOpen","secret","notVerified","keyCode","modalNode","contains","tokenInputHandler","token","web3","eth","getTransactionCount","address","err","txCount","console","log","signatureObj","accounts","sign","privateKey","addrRecover","recover","signature","xhttp","XMLHttpRequest","data","onreadystatechange","readyState","status","obj","JSON","parse","responseText","open","setRequestHeader","send","stringify","verifyToken","verified","goodToken","render","verifyTokenBtn","correctToken","incorrectToken","n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAD,KACjB;AAAM,EAAA,EAAE,EAAC,WAAT;AAAqB,EAAA,QAAQ,EAAED,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,YAAxB;AAAqC,EAAA,QAAQ,EAAEC,iBAA/C;AAAkE,EAAA,SAAS,EAAC,YAA5E;AAAyF,EAAA,WAAW,EAAC,aAArG;AACQ,EAAA,QAAQ,MADhB;AACiB,EAAA,SAAS,EAAC,IAD3B;AACgC,EAAA,SAAS,EAAC,IAD1C;AAC+C,EAAA,OAAO,EAAC,MADvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAGE;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADJ;;AAMA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,SAAnB;AAA8BC,EAAAA,WAA9B;AAA2CC,EAAAA;AAA3C,CAAD,KAA0D;AAC9E,SAAOT,QAAQ,CAACU,YAAT,CACN;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAiC,IAAA,SAAS,EAAEH,SAA5C;AAAuD,IAAA,OAAO,EAAEC,WAAhE;AAA6E,IAAA,QAAQ,EAAC,GAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAEF,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,OAAO,EAAED,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,OAAO,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyD;AAAM,IAAA,CAAC,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,CADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CAJF,CADF,CADM,EAWNE,QAAQ,CAACC,IAXH,CAAP;AAaA,CAdD;;AAgBA,MAAMC,UAAN,SAAyBf,KAAK,CAACC,SAA/B,CAAyC;AAEvCe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAYnBZ,iBAZmB,GAYEa,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACC,cAAN;AAD6B,4BAELD,KAAK,CAACE,MAFD;AAAA,YAErBC,IAFqB,iBAErBA,IAFqB;AAAA,YAEfC,KAFe,iBAEfA,KAFe;;AAI7B,cAAQD,IAAR;AACA,aAAK,YAAL;AACE,cAAIH,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,QAA1B,EAAoC;AAClCN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,qCAA/B;AACD,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,eAA1B,EAA2C;AAChDR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,0CAA/B;AACD,WAFM,MAEA;AACLP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACD;;AACD;;AACF;AACE;AAXF;;AAaA,WAAKE,QAAL,CAAc;AAAE,SAACN,IAAD,GAAQC;AAAV,OAAd;AACD,KA9BkB;;AAAA,SAgCnBlB,YAhCmB,GAgCHc,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKS,cAAL;AACA,WAAKrB,MAAL;AACD,KApCkB;;AAAA,SAsCnBA,MAtCmB,GAsCV,MAAM;AACb,UAAI,KAAKsB,KAAL,CAAWC,MAAf,EAAuB;AACrB,aAAKH,QAAL,CAAc;AAAEI,UAAAA,MAAM,EAAE;AAAV,SAAd;AACD;;AACF,WAAKJ,QAAL,CAAc;AACbG,QAAAA,MAAM,EAAE,CAAC,KAAKD,KAAL,CAAWC,MADP;AAEZE,QAAAA,WAAW,EAAE;AAFD,OAAd;AAIA,KA9CkB;;AAAA,SAgDnBvB,SAhDmB,GAgDNS,KAAD,IAAW;AACxB,aAAOA,KAAK,CAACe,OAAN,KAAkB,EAAlB,IAAwB,KAAK1B,MAAL,EAA/B;AACE,KAlDkB;;AAAA,SAoDnBG,WApDmB,GAoDJQ,KAAD,IAAW;AACxB,UAAI,KAAKgB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBjB,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKb,MAAL;AACD,KAvDmB;;AAAA,SAyDnB6B,iBAzDmB,GAyDElB,KAAD,IAAW;AAC9B,WAAKS,QAAL,CAAc;AAAEU,QAAAA,KAAK,EAAGnB,KAAK,CAACE,MAAN,CAAaE;AAAvB,OAAd;AACA,KA3DkB;;AAAA,SA6DnBM,cA7DmB,GA6DF,MAAM;AACrB,WAAKX,KAAL,CAAWqB,IAAX,CAAgBC,GAAhB,CAAoBC,mBAApB,CAAwC,KAAKvB,KAAL,CAAWwB,OAAnD,EAA4D,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC5E,YAAID,GAAJ,EAAS;AACPE,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,SAFD,MAEO;AACL,cAAII,YAAY,GAAG,KAAK7B,KAAL,CAAWqB,IAAX,CAAgBC,GAAhB,CAAoBQ,QAApB,CAA6BC,IAA7B,iBAA2CL,OAA3C,eAA2D,KAAKd,KAAL,CAAWoB,UAAtE,EAAnB;AACA,cAAIC,WAAW,GAAG,KAAKjC,KAAL,CAAWqB,IAAX,CAAgBC,GAAhB,CAAoBQ,QAApB,CAA6BI,OAA7B,iBAA8CR,OAA9C,GAAyDG,YAAY,CAACM,SAAtE,CAAlB;AACD,cAAIC,KAAK,GAAG,IAAIC,cAAJ,EAAZ;AACC,cAAIC,IAAI,GAAG;AAAEd,YAAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWwB,OAAtB;AAAgCW,YAAAA,SAAS,EAAGN,YAAY,CAACM;AAAzD,WAAX;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;;AAEAG,UAAAA,KAAK,CAACG,kBAAN,GAA2B,MAAM;AACzB,gBAAIH,KAAK,CAACI,UAAN,KAAqB,CAAzB,EAA4B;AAAE;AAC1B,kBAAIJ,KAAK,CAACK,MAAN,KAAiB,GAArB,EAA0B;AAAE;AACxB,oBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,CAACS,YAAjB,CAAV;AACAlB,gBAAAA,OAAO,CAACC,GAAR,CAAYc,GAAG,CAAC5B,MAAhB;;AACA,oBAAG4B,GAAG,CAAC5B,MAAJ,IAAc,IAAjB,EAAuB,CACrB;AACD,iBAFD,MAEO;AACL,uBAAKJ,QAAL,CAAc;AAAEI,oBAAAA,MAAM,EAAE4B,GAAG,CAAC5B;AAAd,mBAAd;AACD;AACJ;AACJ;AACJ,WAZL;;AAaAsB,UAAAA,KAAK,CAACU,IAAN,CAAW,MAAX,EAAmB,qCAAnB,EAA0D,IAA1D;AACAV,UAAAA,KAAK,CAACW,gBAAN,CAAuB,cAAvB,EAAuC,kBAAvC;AACAX,UAAAA,KAAK,CAACY,IAAN,CAAWL,IAAI,CAACM,SAAL,CAAeX,IAAf,CAAX;AACD;AACF,OA5BD;AA6BD,KA3FkB;;AAAA,SA6FnBY,WA7FmB,GA6FL,MAAM;AACnB,UAAId,KAAK,GAAG,IAAIC,cAAJ,EAAZ;AACC,UAAIC,IAAI,GAAG;AACVlB,QAAAA,KAAK,EAAE,KAAKR,KAAL,CAAWQ,KADR;AAEVI,QAAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWwB;AAFV,OAAX;;AAIAY,MAAAA,KAAK,CAACG,kBAAN,GAA2B,MAAM;AACzB,YAAIH,KAAK,CAACI,UAAN,KAAqB,CAAzB,EAA4B;AAAE;AAC1B,cAAIJ,KAAK,CAACK,MAAN,KAAiB,GAArB,EAA0B;AAAE;AACxB,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,CAACS,YAAjB,CAAV;AACAlB,YAAAA,OAAO,CAACC,GAAR,CAAYc,GAAG,CAACS,QAAhB;AACA,iBAAKzC,QAAL,CAAc;AAAE0C,cAAAA,SAAS,EAAEV,GAAG,CAACS;AAAjB,aAAd;AACH;AACJ;AACJ,OARL;;AASAxB,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACAF,MAAAA,KAAK,CAACU,IAAN,CAAW,MAAX,EAAmB,mCAAnB,EAAwD,IAAxD;AACAV,MAAAA,KAAK,CAACW,gBAAN,CAAuB,cAAvB,EAAuC,kBAAvC;AACAX,MAAAA,KAAK,CAACY,IAAN,CAAWL,IAAI,CAACM,SAAL,CAAeX,IAAf,CAAX;AACA,WAAK5B,QAAL,CAAc;AAAEK,QAAAA,WAAW,EAAG;AAAhB,OAAd;AACD,KAjHkB;;AAElB,SAAKH,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZO,MAAAA,KAAK,EAAE,EAFK;AAGVN,MAAAA,MAAM,EAAE,EAHE;AAIVkB,MAAAA,UAAU,EAAE,EAJF;AAKVjB,MAAAA,WAAW,EAAE,IALH;AAMVqC,MAAAA,SAAS,EAAE;AAND,KAAb;AAQA;;AAyGDC,EAAAA,MAAM,GAAG;AAER,UAAMC,cAAc,GACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEG;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,QAAQ,EAAE,KAAKnC,iBAA/C;AAAkE,MAAA,SAAS,EAAC,YAA5E;AAAyF,MAAA,WAAW,EAAC,OAArG;AAA6G,MAAA,QAAQ,MAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,EAGG;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAK+B,WAApC;AAAiD,MAAA,SAAS,EAAC,aAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHH,CADD;AAOC,UAAMK,YAAY,GAAG;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAArB;AACA,UAAMC,cAAc,GAAG;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAvB;AAED,WACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AACC,MAAA,YAAY,EAAE,KAAKrE,YADpB;AAEC,MAAA,iBAAiB,EAAE,KAAKC,iBAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAKE,KAAKwB,KAAL,CAAWC,MAAX,IACA,oBAAC,YAAD;AACC,MAAA,MAAM,EAAE,KAAKvB,MADd;AAEC,MAAA,SAAS,EAAE,KAAKE,SAFjB;AAGC,MAAA,WAAW,EAAE,KAAKC,WAHnB;AAIC,MAAA,QAAQ,EAAEgE,CAAC,IAAI,KAAKxC,SAAL,GAAiBwC,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCALD,EAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,EAOC;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAE,KAAK7C,KAAL,CAAWE,MAA1C;AAAkD,MAAA,GAAG,EAAC,2BAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,EAQG,KAAKF,KAAL,CAAWG,WAAX,GAAyBuC,cAAzB,GACE,KAAK1C,KAAL,CAAWwC,SAAX,GAAuBG,YAAvB,GAAsCC,cAT3C,CANF,CADH;AAqBA;;AAtJsC;;AAyJzC,eAAe1D,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({handleSubmit, handleInputChange}) =>\n    <form id=\"TokenForm\" onSubmit={handleSubmit}> \n      <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput\" placeholder=\"Private Key\"\n              required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n      <button type=\"submit\" className=\"smartButton\">enable 2fa</button>\n    </form>;\nconst ModalContent = ({toggle, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={toggle}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalToken extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n  \t\tisOpen: false,\n  \t\ttoken: '',\n      secret: '',\n      privateKey: '',\n      notVerified: true,\n      goodToken: false\n  \t}\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      } \n      break; \n    default:\n      break;\n    }\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.generateSecret();\n    this.toggle();\n  }\n\n  toggle = () => {\n    if (this.state.isOpen) {\n      this.setState({ secret: '' });\n    }\n\t  this.setState({ \n\t\t  isOpen: !this.state.isOpen, \n\t    notVerified: true\n\t  });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.toggle();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.toggle();\n\t};\n\n  tokenInputHandler = (event) => {\n  \tthis.setState({ token : event.target.value });\n  }\t\n\n  generateSecret = () => {\n    this.props.web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n      if (err) {\n        console.log(err)\n      } else {\n        let signatureObj = this.props.web3.eth.accounts.sign(`Token ${txCount}`, `0x${this.state.privateKey}`);\n        let addrRecover = this.props.web3.eth.accounts.recover(`Token ${txCount}`, signatureObj.signature);\n      \tvar xhttp = new XMLHttpRequest();\n        var data = { address: this.props.address , signature : signatureObj.signature};\n        console.log(data);\n        console.log(addrRecover)\n        \n        xhttp.onreadystatechange = () => {\n                if (xhttp.readyState === 4) { // request is done\n                    if (xhttp.status === 200) { // successfully\n                        var obj = JSON.parse(xhttp.responseText);\n                        console.log(obj.secret);\n                        if(obj.secret == null) {\n                          //this.setState({ secret: 'Wrong private key' });\n                        } else {\n                          this.setState({ secret: obj.secret });\n                        }\n                    }\n                }\n            };\n        xhttp.open(\"POST\", \"http://localhost:5597/totp-generate\", true);\n        xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhttp.send(JSON.stringify(data));\n      }\n    })\n  }\n\n  verifyToken = () => {\n  \tvar xhttp = new XMLHttpRequest();\n    var data = { \n    \ttoken: this.state.token ,\n    \taddress: this.props.address\n    };\n    xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) { // request is done\n                if (xhttp.status === 200) { // successfully\n                    var obj = JSON.parse(xhttp.responseText);\n                    console.log(obj.verified);\n                    this.setState({ goodToken: obj.verified });\n                }\n            }\n        };\n    console.log(data);\n    xhttp.open(\"POST\", \"http://localhost:5597/totp-verify\", true);\n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhttp.send(JSON.stringify(data));\n    this.setState({ notVerified : false });\n  }\n\n  render() {\n\n  \tconst verifyTokenBtn = \n  \t\t<form>\n       \t<hr/>\n\t      <input type=\"text\" name=\"token\" onChange={this.tokenInputHandler} className=\"modalInput\" placeholder=\"Token\" required/>\n\t      <button type=\"button\" onClick={this.verifyToken} className=\"modalButton\">submit token</button>\n\t    </form>;\n\n    const correctToken = <p className=\"successToken\">The token submitted is correct.</p>;\n    const incorrectToken = <p className=\"failToken\">The token submitted is incorrect.</p>;\n\n  \treturn (\n      <div>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit}\n        handleInputChange={this.handleInputChange}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\ttoggle={this.toggle} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t<p className=\"modalHeader\">Two-factor authentication</p>\n       \t\t<hr/>\n       \t\t<img className=\"modalImg\" src={this.state.secret} alt=\"Generic placeholder image\" />\n       \t\t{ this.state.notVerified ? verifyTokenBtn : \n            \tthis.state.goodToken ? correctToken : incorrectToken }\n       \t</ModalContent>\n       }\n      </div>\n    );\n  }\n}\n\nexport default ModalToken;"]},"metadata":{},"sourceType":"module"}