{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalDeposit.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  noValidate: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToDeposit\",\n  onChange: handleInputChange,\n  className: \"smartInput2\",\n  placeholder: \"Amount\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput2\",\n  placeholder: \"Private Key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, \"deposit\"), errors.amountToDeposit.length > 0 && React.createElement(\"span\", {\n  className: \"errorMultiple\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, errors.amountToDeposit), errors.privateKey.length > 0 && React.createElement(\"span\", {\n  className: \"errorMultiple\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, errors.privateKey));\n\nconst ModalContent = ({\n  toggle,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalDeposit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'amountToDeposit':\n          if (isNaN(value)) {\n            errors.amountToDeposit = 'Amount must be a number';\n          } else {\n            errors.amountToDeposit = '';\n          }\n\n          break;\n\n        case 'privateKey':\n          if (value.length == 0) {\n            errors.privateKey = '';\n          } else if (value.length != 64) {\n            errors.privateKey = 'Private key length must be 64';\n          } else {\n            errors.privateKey = '';\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors,\n        [name]: value,\n        typed: true\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.errors.amountToDeposit.length == 0 && this.state.errors.privateKey.length == 0 && this.state.typed == true) {\n        this.deposit(this.state.amountToDeposit, this.state.privateKey);\n      } else {\n        console.error('Invalid Form');\n      }\n    };\n\n    this.toggle = () => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.toggle();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.toggle();\n    };\n\n    this.deposit = (amountToDeposit, privateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        // Build the transaction\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisig.methods.deposit().estimateGas({\n            gas: gasPrice,\n            from: this.props.address,\n            value: amountToDeposit\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount),\n              gasPrice: web3.utils.toHex(gasPrice),\n              to: this.props.multisigAddress,\n              value: web3.utils.toHex(amountToDeposit),\n              data: multisig.methods.deposit().encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(privateKey);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx);\n            /*\n                            // Broadcast the transaction\n                            this.props.web3.eth.sendSignedTransaction(rawTx, (error, txHash) => {\n                                if (error) {\n                                    console.log(error)\n                                } else {\n                                   console.log('txHash: ', txHash)\n                                }\n                            })*/\n          });\n        });\n      });\n    };\n\n    this.state = {\n      amountToDeposit: '',\n      privateKey: '',\n      isOpen: false,\n      errors: {\n        amountToDeposit: '',\n        privateKey: ''\n      },\n      typed: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      toggle: this.toggle,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Your current safety address is\")));\n  }\n\n}\n\nexport default ModalDeposit;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalDeposit.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","amountToDeposit","length","privateKey","ModalContent","toggle","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalDeposit","constructor","props","event","preventDefault","target","name","value","state","isNaN","setState","typed","deposit","console","error","isOpen","keyCode","modalNode","contains","web3","multisig","eth","getTransactionCount","address","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","from","gasAmount","log","txObject","nonce","utils","toHex","gasLimit","to","multisigAddress","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","render","n"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit} noValidate>\n          <input type=\"text\" name=\"amountToDeposit\" onChange={handleInputChange} className=\"smartInput2\" placeholder=\"Amount\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput2\" placeholder=\"Private Key\"/>\n          <button type=\"submit\" className=\"smartButton\">deposit</button>\n          {errors.amountToDeposit.length > 0 && <span className='errorMultiple'>{errors.amountToDeposit}</span>}\n          {errors.privateKey.length > 0 && <span className='errorMultiple'>{errors.privateKey}</span>}\n        </form>;\nconst ModalContent = ({toggle, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={toggle}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalDeposit extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      amountToDeposit: '',\n      privateKey: '',\n  \t\tisOpen: false,\n      errors: {\n        amountToDeposit: '',\n        privateKey: ''\n      },\n      typed: false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    let errors = this.state.errors;\n\n    switch (name) {\n    case 'amountToDeposit': \n      if (isNaN(value)) {\n        errors.amountToDeposit = 'Amount must be a number';\n      } else {\n        errors.amountToDeposit = '';\n      }\n      break;\n    case 'privateKey':\n      if (value.length == 0) {\n        errors.privateKey = ''; \n      } else if (value.length != 64) {\n        errors.privateKey = 'Private key length must be 64';\n      } else {\n        errors.privateKey = '';\n      }\n    default:\n      break;\n  }\n\n    this.setState({errors, [name]: value, typed:true});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if(this.state.errors.amountToDeposit.length == 0 && this.state.errors.privateKey.length == 0 && this.state.typed == true) {\n      this.deposit(this.state.amountToDeposit, this.state.privateKey);\n    }else{\n      console.error('Invalid Form');\n    }\n  }\n  \n  toggle = () => {\n\tthis.setState({ \n\t\tisOpen: !this.state.isOpen, \n\t  });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.toggle();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.toggle();\n\t};\n\n  deposit = (amountToDeposit, privateKey) => {\n    let web3 = this.props.web3;\n    let multisig = this.props.multisig;\n    web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n      // Build the transaction\n        web3.eth.getGasPrice().then((gasPrice) => {\n            multisig.methods.deposit().estimateGas({gas: gasPrice, from: this.props.address, value: amountToDeposit}, function(error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount),\n                    gasPrice: web3.utils.toHex(gasPrice),\n                    to: this.props.multisigAddress,\n                    value: web3.utils.toHex(amountToDeposit),\n                    data: multisig.methods.deposit().encodeABI()\n                };\n                console.log(txObject);\n\n                // Sign the transaction\n                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                tx.sign(privateKey);\n\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                \n                console.log(rawTx);\n/*\n                // Broadcast the transaction\n                this.props.web3.eth.sendSignedTransaction(rawTx, (error, txHash) => {\n                    if (error) {\n                        console.log(error)\n                    } else {\n                       console.log('txHash: ', txHash)\n                    }\n                })*/\n            })\n        })\n    })\n  } \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\ttoggle={this.toggle} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t<p className=\"modalHeader\">Your current safety address is</p> \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalDeposit;"]},"metadata":{},"sourceType":"module"}