{"ast":null,"code":"import { publicKeyConvert } from 'secp256k1';\nimport { pubToAddress, toChecksumAddress } from 'ethereumjs-util';\nexport function compress(startsWith04) {\n  // add trailing 04 if not done before\n  var testBuffer = new Buffer(startsWith04, 'hex');\n  if (testBuffer.length === 64) startsWith04 = '04' + startsWith04;\n  return publicKeyConvert(new Buffer(startsWith04, 'hex'), true).toString('hex');\n}\nexport function decompress(startsWith02Or03) {\n  // if already decompressed an not has trailing 04\n  var testBuffer = new Buffer(startsWith02Or03, 'hex');\n  if (testBuffer.length === 64) startsWith02Or03 = '04' + startsWith02Or03;\n  var decompressed = publicKeyConvert(new Buffer(startsWith02Or03, 'hex'), false).toString('hex'); // remove trailing 04\n\n  decompressed = decompressed.substring(2);\n  return decompressed;\n}\n/**\n * generates the ethereum-adress of the publicKey\n * We create the checksum-adress which is case-sensitive\n * @returns {string} address\n */\n\nexport function toAddress(publicKey) {\n  // normalize key\n  publicKey = decompress(publicKey);\n  var addressBuffer = pubToAddress(new Buffer(publicKey, 'hex'));\n  var checkSumAdress = toChecksumAddress(addressBuffer.toString('hex'));\n  return checkSumAdress;\n}","map":null,"metadata":{},"sourceType":"module"}