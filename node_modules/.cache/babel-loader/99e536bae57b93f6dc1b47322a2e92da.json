{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, TOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from './config';\nimport SmartContract from './SmartContract';\nimport ERC20 from './erc20/ERC20';\nimport './css/ButtonGroup.css';\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateBalances = () => {\n      let etherBalance = null;\n      let contractBalance = null;\n      this.state.multisig.methods.balances(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          contractBalance = balance;\n          this.state.web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n            if (error) {\n              console.log(error, 'Something went wrong');\n            } else {\n              etherBalance = balance;\n              console.log(etherBalance);\n              console.log('Ether', etherBalance);\n              this.setState({\n                contractBalance: contractBalance,\n                etherBalance: etherBalance\n              });\n              console.log('New etherBalance : ', this.state.etherBalance);\n              console.log('New contractBalance : ', this.state.contractBalance);\n            }\n          });\n        }\n      });\n    };\n\n    this.updateERCBalances = () => {\n      this.state.tokenImperial.methods.balanceOf(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenImperialBalance: balance\n          });\n          console.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n        }\n      });\n      this.state.tokenDemocratic.methods.balanceOf(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenDemocraticBalance: balance\n          });\n          console.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n        }\n      });\n      this.state.multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENIMPERIAL_SYMBOL).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenImperialContractBalance: balance\n          });\n          console.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n        }\n      });\n      this.state.multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenDemocraticContractBalance: balance\n          });\n          console.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n        }\n      });\n    };\n\n    this.onHandleClick = e => {\n      e.preventDefault();\n      var current = document.getElementsByClassName(\"active\");\n      current[0].className = current[0].className.replace(\" active\", \"\");\n      e.target.className += \" active\";\n      const name = e.target.name;\n\n      switch (name) {\n        case 'Ethereum':\n          if (this.state.Ethereum != true) {\n            this.setState({\n              'Ethereum': true\n            });\n          }\n\n          break;\n\n        case 'ERC20':\n          if (this.state.Ethereum == true) {\n            this.setState({\n              'Ethereum': false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: '',\n      etherBalance: '',\n      tokenImperialBalance: '',\n      tokenDemocraticBalance: '',\n      contractBalance: '',\n      tokenImperialContractBalance: '',\n      tokenDemocraticContractBalance: '',\n      Ethereum: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    const multisigERC20Token = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n    this.setState({\n      multisigERC20Token: multisigERC20Token\n    });\n    const tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n    this.setState({\n      tokenImperial: tokenImperial\n    });\n    const tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n    this.setState({\n      tokenDemocratic: tokenDemocratic\n    });\n    web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          etherBalance: balance\n        });\n        console.log('Account ether balance: ', this.state.etherBalance);\n      }\n    });\n    multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENIMPERIAL_SYMBOL).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenImperialContractBalance: balance\n        });\n        console.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n      }\n    });\n    multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenDemocraticContractBalance: balance\n        });\n        console.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n      }\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          contractBalance: balance\n        });\n        console.log('The contract balance of account is: ', this.state.contractBalance);\n      }\n    });\n    tokenImperial.methods.balanceOf(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenImperialBalance: balance\n        });\n        console.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n      }\n    });\n    tokenDemocratic.methods.balanceOf(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenDemocraticBalance: balance\n        });\n        console.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n      }\n    }); //this.interval = setInterval(this.updateBalances, 15000);\n\n    this.interval = updateERCBalances(this.updateERCBalances, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"smart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btnGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttonInGroup active\",\n      name: \"Ethereum\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Ethereum\"), React.createElement(\"button\", {\n      className: \"buttonInGroup\",\n      name: \"ERC20\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"ERC20\")), this.state.Ethereum ? React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.state.etherBalance,\n      contractBalance: this.state.contractBalance,\n      updateBalances: this.updateBalances,\n      web3: this.state.web3,\n      multisig: this.state.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }) : React.createElement(ERC20, {\n      web3: this.state.web3,\n      address: this.props.etherAddress,\n      tokenImperialBalance: this.state.tokenImperialBalance,\n      tokenDemocraticBalance: this.state.tokenDemocraticBalance,\n      tokenImperial: this.state.tokenImperial,\n      tokenDemocratic: this.state.tokenDemocratic,\n      multisigERC20Address: MULTISIG_ERC20_ADDRESS,\n      multisigERC20Token: this.state.multisigERC20Token,\n      tokenDemocraticContractBalance: this.state.tokenDemocraticContractBalance,\n      tokenImperialContractBalance: this.state.tokenImperialContractBalance,\n      updateERCBalances: this.updateERCBalances,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","MULTISIG_ERC20_ABI","MULTISIG_ERC20_ADDRESS","ERC20_ABI","TOKENIMPERIAL_ADDRESS","TOKENDEMOCRATIC_ADDRESS","TOKENIMPERIAL_SYMBOL","TOKENDEMOCRATIC_SYMBOL","SmartContract","ERC20","BlockchainData","constructor","props","updateBalances","etherBalance","contractBalance","state","multisig","methods","balances","etherAddress","call","from","error","balance","console","log","web3","eth","getBalance","setState","updateERCBalances","tokenImperial","balanceOf","tokenImperialBalance","tokenDemocratic","tokenDemocraticBalance","multisigERC20Token","tokenBalances","tokenImperialContractBalance","tokenDemocraticContractBalance","onHandleClick","e","preventDefault","current","document","getElementsByClassName","className","replace","target","name","Ethereum","getDerivedStateFromProps","componentDidMount","Contract","interval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, \n\tTOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from './config';\nimport SmartContract from './SmartContract'; \nimport ERC20 from './erc20/ERC20';\nimport './css/ButtonGroup.css';\n\n\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/ \nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: '',\n\t\t\tetherBalance: '',\n\t\t\ttokenImperialBalance: '',\n\t\t\ttokenDemocraticBalance: '',\n\t\t\tcontractBalance: '',\n\t\t\ttokenImperialContractBalance: '',\n\t\t\ttokenDemocraticContractBalance: '',\n\t\t\tEthereum: true\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tconst multisigERC20Token = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n\t\tthis.setState({ multisigERC20Token: multisigERC20Token });\n\t\tconst tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n\t\tthis.setState({ tokenImperial: tokenImperial });\n\t\tconst tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n\t\tthis.setState({ tokenDemocratic: tokenDemocratic });\n\t\tweb3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t        this.setState({ etherBalance: balance });\n\t    \t\tconsole.log('Account ether balance: ', this.state.etherBalance);\n\t    \t}\n\t\t\t})\n\t\tmultisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENIMPERIAL_SYMBOL).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialContractBalance: balance });\n\t\t       \tconsole.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n\t\t    }\n\t\t})\n\n\t\tmultisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenDemocraticContractBalance: balance });\n\t\t       \tconsole.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n\t\t    }\n\t\t})\n\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ contractBalance: balance });\n\t\t       \tconsole.log('The contract balance of account is: ', this.state.contractBalance);\n\t\t    }\n\t\t})\n\n\t\ttokenImperial.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialBalance: balance });\n\t\t       \tconsole.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n\t\t    }\n\t\t})\n\n\t\ttokenDemocratic.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenDemocraticBalance: balance });\n\t\t       \tconsole.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n\t\t    }\n\t\t})\n\n\t\t//this.interval = setInterval(this.updateBalances, 15000);\n\t\tthis.interval = updateERCBalances(this.updateERCBalances, 15000);\n  \t}\n\n  \tcomponentWillUnmount() {\n\t   \tclearInterval(this.interval);\n\t}\n\n\tupdateBalances = () => {\n  \t\tlet etherBalance = null;\n  \t\tlet contractBalance = null\n\t    this.state.multisig.methods.balances(this.state.etherAddress).call({ from: this.state.etherAddress }, (error, balance) => {\n        \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t    \t\tcontractBalance = balance;\n\t    \t\tthis.state.web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t  \t\t\tif (error) {\n\t\t  \t\t\t\tconsole.log(error, 'Something went wrong');\n\t\t  \t\t\t} else {\n\t\t\t\t\t\tetherBalance = balance;\n\t\t\t\t\t\tconsole.log(etherBalance);\n\t\t\t\t\t\tconsole.log('Ether',etherBalance);\n\t\t\t      \t\tthis.setState({ contractBalance : contractBalance, etherBalance : etherBalance});\n\t\t\t      \t\tconsole.log('New etherBalance : ', this.state.etherBalance);\n\t\t\t      \t\tconsole.log('New contractBalance : ', this.state.contractBalance);\n\t\t\t      \t}\n\t\t\t      }\n\t\t\t    );\n\t      \t}\n      \t});\n  \t}\n  \tupdateERCBalances = () => {\n  \t\t\n  \t\tthis.state.tokenImperial.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialBalance: balance });\n\t\t       \tconsole.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n\t\t    }\n\t\t})\n\n\t\tthis.state.tokenDemocratic.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenDemocraticBalance: balance });\n\t\t       \tconsole.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n\t\t    }\n\t\t})\n\n      \tthis.state.multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENIMPERIAL_SYMBOL).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialContractBalance: balance });\n\t\t       \tconsole.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n\t\t    }\n\t\t})\n\n\t\tthis.state.multisigERC20Token.methods.tokenBalances(this.state.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenDemocraticContractBalance: balance });\n\t\t       \tconsole.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n\t\t    }\n\t\t})\n  \t}\n\n  \tonHandleClick = (e) => {\n  \t\te.preventDefault();\n  \t\tvar current = document.getElementsByClassName(\"active\");\n\t\tcurrent[0].className = current[0].className.replace(\" active\", \"\");\n\t\te.target.className += \" active\";\n\t\tconst name = e.target.name;\n\n\t    switch (name) {\n\t    case 'Ethereum': \n\t      if (this.state.Ethereum != true) {\n\t\t\tthis.setState({ 'Ethereum': true });\n\t      }\n\t      break;\n\t    case 'ERC20': \n\t      if (this.state.Ethereum == true) {\n\t\t\tthis.setState({ 'Ethereum': false });\n\t      }\n\t      break;   \n\t    default:\n\t      break;\n\t    }\n  \t}\n  \t\n\trender() {\n  \t  \treturn (\n      \t\t<div id=\"content\" className =\"smart\">\n      \t\t\t<div className=\"btnGroup\">\n\t\t\t\t  \t<button className=\"buttonInGroup active\" name=\"Ethereum\" onClick={this.onHandleClick}>Ethereum</button>\n\t\t\t\t  \t<button className=\"buttonInGroup\" name=\"ERC20\" onClick={this.onHandleClick}>ERC20</button>\n      \t\t\t</div>\n      \t\t\t{\n      \t\t\tthis.state.Ethereum ? \n        \t\t<SmartContract \n        \t\t\taddress={this.props.etherAddress} \n        \t\t\tetherBalance={this.state.etherBalance}\n        \t\t\tcontractBalance={this.state.contractBalance}\n        \t\t\tupdateBalances={this.updateBalances}\n        \t\t\tweb3={this.state.web3}\n        \t\t\tmultisig={this.state.multisig} \n        \t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n        \t\t:\n        \t\t<ERC20 \n        \t\t\tweb3={this.state.web3}\n        \t\t\taddress={this.props.etherAddress} \n        \t\t\ttokenImperialBalance={this.state.tokenImperialBalance}\n        \t\t\ttokenDemocraticBalance={this.state.tokenDemocraticBalance}\n        \t\t\ttokenImperial={this.state.tokenImperial}\n        \t\t\ttokenDemocratic={this.state.tokenDemocratic}\n        \t\t\tmultisigERC20Address={MULTISIG_ERC20_ADDRESS}\n        \t\t\tmultisigERC20Token={this.state.multisigERC20Token}\n        \t\t\ttokenDemocraticContractBalance={this.state.tokenDemocraticContractBalance}\n        \t\t\ttokenImperialContractBalance={this.state.tokenImperialContractBalance}\n        \t\t\tupdateERCBalances={this.updateERCBalances}/>\n        \t\t}\n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}