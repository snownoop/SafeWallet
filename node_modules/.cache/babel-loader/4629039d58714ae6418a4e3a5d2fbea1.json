{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalRecoverERC.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ReceiptComponent, InitialTxHashComponent } from '../sharedComponents/sharedComponents.js';\nimport '../Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"SetLimit\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToTransfer\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Amount\",\n  required: true,\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"ownerPublic\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Current Owner\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"recipientAddress\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Recipient\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, \"recover erc\"));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalRecoverERC extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'ownerPublic':\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Public key has to be 42 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Public key has to start with '0x'\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.recoverFunds(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.recoverFunds = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n      let web3 = this.props.web3;\n      let multisigERC20Token = this.props.multisigERC20Token;\n      let multisigERC20Address = this.props.multisigERC20Address;\n      let modal = this;\n      let updateERCBalances = this.props.updateERCBalances;\n      let tokenSymbol = this.props.tokenSymbol;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Build the transaction\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisigERC20Token.methods.recoverFunds(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).estimateGas({\n            gas: gasPrice,\n            from: addrFrom\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount * 2),\n              // Estimate is not always correct\n              gasPrice: web3.utils.toHex(gasPrice),\n              // Pay Higher Price for testing purposes\n              to: multisigERC20Address,\n              data: multisigERC20Token.methods.recoverFunds(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(priv);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx); // Broadcast the transaction\n\n            web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n              console.log('Hash of transaction: ', hash);\n              modal.setState({\n                txHash: hash,\n                hashReceipt: true,\n                confirmationReceipt: false\n              });\n              modal.openModal();\n            }).once('confirmation', function (confNumber, receipt) {\n              console.log('Transaction confirmation number: ', confNumber);\n              console.log('Transaction receipt: ', receipt);\n              updateERCBalances();\n              modal.setState({\n                txReceipt: receipt,\n                confirmationReceipt: true,\n                hashReceipt: false\n              });\n              modal.openModal();\n            }).on('error', function (error) {\n              console.log(error);\n            });\n          });\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      ownerPublic: '',\n      recipientAddress: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default ModalRecoverERC;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/erc20/ModalRecoverERC.js"],"names":["React","Component","ReactDOM","ReceiptComponent","InitialTxHashComponent","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalRecoverERC","constructor","props","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","recoverFunds","state","ownerPublic","recipientAddress","amountToTransfer","privateKey","openModal","isOpen","keyCode","modalNode","contains","web3","multisigERC20Token","multisigERC20Address","modal","updateERCBalances","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","error","gasAmount","console","log","txObject","nonce","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ReceiptComponent, InitialTxHashComponent} from '../sharedComponents/sharedComponents.js';\nimport '../Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"SetLimit\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"amountToTransfer\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Amount\" \n            required pattern=\"\\d+\"/>\n          <input type=\"text\" name=\"ownerPublic\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Current Owner\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>  \n          <input type=\"text\" name=\"recipientAddress\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Recipient\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>  \n          <button type=\"submit\" className=\"smartButton\">recover erc</button>\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalRecoverERC extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      ownerPublic: '',\n      recipientAddress: '',\n      privateKey: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'amountToTransfer': \n      if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }  \n      break;\n    case 'ownerPublic':\n    case 'recipientAddress':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Public key has to be 42 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Public key has to start with '0x'\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }     \n      break;\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;  \n    default:\n      break;\n    }\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.recoverFunds(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  recoverFunds = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n    let web3 = this.props.web3;\n    let multisigERC20Token = this.props.multisigERC20Token;\n    let multisigERC20Address = this.props.multisigERC20Address;\n    let modal = this;\n    let updateERCBalances = this.props.updateERCBalances;\n    let tokenSymbol = this.props.tokenSymbol;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n\n        // Build the transaction\n        web3.eth.getGasPrice().then((gasPrice) => {\n\n          multisigERC20Token.methods.recoverFunds(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n                nonce: web3.utils.toHex(txCount),\n                gasLimit: web3.utils.toHex(gasAmount*2), // Estimate is not always correct\n                gasPrice: web3.utils.toHex(gasPrice), // Pay Higher Price for testing purposes\n                to: multisigERC20Address,\n                data: multisigERC20Token.methods.recoverFunds(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).encodeABI()\n            };\n            console.log(txObject);\n\n            // Sign the transaction\n            const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n            tx.sign(priv);\n\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            \n            console.log(rawTx);\n\n            // Broadcast the transaction\n            web3.eth.sendSignedTransaction(rawTx)\n            .once('transactionHash', function(hash){ \n                console.log('Hash of transaction: ', hash)\n                modal.setState({ \n                  txHash: hash,\n                  hashReceipt: true,\n                  confirmationReceipt: false                       \n                });\n                modal.openModal();\n            })\n            .once('confirmation', function(confNumber, receipt){ \n                console.log('Transaction confirmation number: ', confNumber) \n                console.log('Transaction receipt: ', receipt)\n                updateERCBalances();\n                \n                modal.setState({ \n                  txReceipt: receipt,\n                  confirmationReceipt: true, \n                  hashReceipt: false\n                });\n                modal.openModal(); \n            })\n            .on('error', function(error){ console.log(error) });\n        })\n      })\n    })\n  } \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <InitialTxHashComponent transactionHash={this.state.txHash} />\n            : null} \n          {this.state.confirmationReceipt ?\n            <ReceiptComponent\n              transactionHash={this.state.txReceipt.transactionHash}\n              blockHash={this.state.txReceipt.blockHash}\n              blockNumber={this.state.txReceipt.blockNumber}\n              gasUsed={this.state.txReceipt.gasUsed}/>\n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalRecoverERC;"]},"metadata":{},"sourceType":"module"}