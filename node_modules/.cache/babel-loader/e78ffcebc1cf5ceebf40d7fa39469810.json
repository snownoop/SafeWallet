{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalTransferSafetyKey.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nvar EthCrypto = require(\"eth-crypto\");\n\nvar BigNumber = require('bignumber.js');\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  noValidate: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToTransfer\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Amount\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"recipientAddress\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Recipient\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Private Key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"safetyPrivateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput4\",\n  placeholder: \"Safety Key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, \"Transfer \"), errors.privateKey.length > 0 && React.createElement(\"span\", {\n  className: \"errorMultiple\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, errors.privateKey));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalTransferSafetyKey extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'amountToDeposit':\n          if (isNaN(value)) {\n            errors.amountToDeposit = 'Amount must be a number';\n          } else {\n            errors.amountToDeposit = '';\n          }\n\n          break;\n\n        case 'privateKey':\n          if (value.length == 0) {\n            errors.privateKey = '';\n          } else if (value.length != 64) {\n            errors.privateKey = 'Private key length must be 64';\n          } else {\n            errors.privateKey = '';\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors,\n        [name]: value,\n        typed: true\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.errors.privateKey.length == 0 && this.state.typed == true) {\n        this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.safetyPrivateKey);\n      } else {\n        console.error('Invalid Form');\n      }\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.transfer = (amountToDeposit, recipientAddress, privateKey, safetyPrivateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      BigNumber.set({\n        DECIMAL_PLACES: 18\n      }); // We need it to convert large wei inputs\n      // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisig.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // The next few lines go around issues with big numbers\n            let x = new BigNumber(amountToDeposit);\n            let val = web3.utils.fromWei(x.toString(10), 'ether');\n            let value = web3.utils.toWei(val.toString(), 'ether');\n            let msg = [{\n              type: \"address\",\n              value: addrFrom\n            }, {\n              type: \"address\",\n              value: recipientAddress\n            }, {\n              type: \"uint256\",\n              value: value\n            }, {\n              type: \"uint256\",\n              value: nonce.toString()\n            }];\n            console.log(msg);\n\n            const _message = EthCrypto.hash.keccak256(msg);\n\n            console.log(\"message: \".concat(_message));\n\n            const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n            console.log(\"signature: \".concat(_signature)); // Build the transaction\n\n            web3.eth.getGasPrice().then(gasPrice => {\n              console.log('Current gas price: ', gasPrice);\n              multisig.methods.verifyTransaction(addrFrom, recipientAddress, value, _signature).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                if (error) {\n                  console.log(error);\n                } else {\n                  console.log('Estimate of gas usage: ', gasAmount);\n                  const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount * 3),\n                    // For testing, so transactions accepted faster\n                    gasPrice: web3.utils.toHex(gasPrice * 3),\n                    to: multisigAddress,\n                    data: multisig.methods.verifyTransaction(addrFrom, recipientAddress, value, _signature).encodeABI()\n                  };\n                  console.log(txObject); // Sign the transaction\n\n                  const tx = new Tx(txObject, {\n                    chain: 'ropsten',\n                    hardfork: 'petersburg'\n                  });\n                  tx.sign(priv);\n                  const serializedTransaction = tx.serialize();\n                  const rawTx = '0x' + serializedTransaction.toString('hex');\n                  console.log(rawTx); // Broadcast the transaction\n\n                  web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                    console.log('Hash of transaction: ', hash);\n                    modal.setState({\n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false\n                    });\n                    modal.openModal();\n                  }).once('confirmation', function (confNumber, receipt) {\n                    console.log('Transaction confirmation number: ', confNumber);\n                    console.log('Second receipt of transaction: ', receipt);\n                    updateBalances();\n                    modal.setState({\n                      txReceipt: receipt,\n                      confirmationReceipt: true,\n                      hashReceipt: false\n                    });\n                    modal.openModal();\n                  }).on('error', function (error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      safetyPrivateKey: '',\n      isOpen: false,\n      errors: {\n        amountToTransfer: '',\n        privateKey: ''\n      },\n      typed: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  /* // Build the transaction\n     web3.eth.getGasPrice().then((gasPrice) => {\n         multisig.methods.deposit().estimateGas({gas: gasPrice, from: this.props.address, value: amountToDeposit}, function(error, gasAmount) {\n             console.log('Current gas price: ', gasPrice);\n             console.log('Estimate of gas usage: ', gasAmount);\n             const txObject = {\n                 nonce: web3.utils.toHex(txCount),\n                 gasLimit: web3.utils.toHex(gasAmount * 5), // testing\n                 gasPrice: web3.utils.toHex(gasPrice * 5), // Pay Higher Price for testing purposes\n                 to: multisigAddress,\n                 value: web3.utils.toHex(amountToDeposit),\n                 data: multisig.methods.deposit(safetyPubKey).encodeABI()\n             };\n             console.log(txObject);\n              // Sign the transaction\n             const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n             tx.sign(priv);\n              const serializedTransaction = tx.serialize();\n             const rawTx = '0x' + serializedTransaction.toString('hex');\n             \n             console.log(rawTx);\n              // Broadcast the transaction\n             web3.eth.sendSignedTransaction(rawTx)\n             .once('transactionHash', function(hash){ \n                 console.log('Hash of transaction: ', hash)\n                 modal.setState({ \n                   txHash: hash,\n                   hashReceipt: true,\n                   confirmationReceipt: false                       \n                 });\n                 modal.openModal();\n             })\n             .once('confirmation', function(confNumber, receipt){ \n                 console.log('Transaction confirmation number: ', confNumber) \n                 console.log('Transaction receipt: ', receipt)\n                 updateBalances();\n                 \n                 modal.setState({ \n                   txReceipt: receipt,\n                   confirmationReceipt: true, \n                   hashReceipt: false\n                 });\n                 modal.openModal(); \n             })\n             .on('error', function(error){ console.log(error) });\n         })\n     })\n  })*/\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), this.state.txHash) : null, this.state.confirmationReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Transaction confirmed! \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), \"Please view the receipt:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), this.state.txReceipt.transactionHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), \"Block hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), this.state.txReceipt.blockHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), \"Block number is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), this.state.txReceipt.blockNumber, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), \"Gas used:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), this.state.txReceipt.gasUsed.toString('hex')) : null));\n  }\n\n}\n\nexport default ModalTransferSafetyKey;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalTransferSafetyKey.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","EthCrypto","BigNumber","ModalTrigger","handleSubmit","handleInputChange","errors","privateKey","length","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalTransferSafetyKey","constructor","props","event","preventDefault","target","name","value","state","isNaN","amountToDeposit","setState","typed","transfer","amountToTransfer","recipientAddress","safetyPrivateKey","console","error","openModal","isOpen","keyCode","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","addrFrom","address","priv","Buffer","from","set","DECIMAL_PLACES","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","nonce","log","x","val","utils","fromWei","toString","toWei","msg","type","_message","hash","keccak256","_signature","sign","getGasPrice","then","gasPrice","verifyTransaction","estimateGas","gas","gasAmount","txObject","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","serializedTransaction","serialize","rawTx","sendSignedTransaction","once","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AACA,IAAIC,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AAEA,MAAMI,YAAY,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA,iBAAf;AAAkCC,EAAAA;AAAlC,CAAD,KACb;AAAM,EAAA,EAAE,EAAC,aAAT;AAAuB,EAAA,QAAQ,EAAEF,YAAjC;AAA+C,EAAA,UAAU,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEC,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,QAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEA,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,WAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,YAAxB;AAAqC,EAAA,QAAQ,EAAEA,iBAA/C;AAAkE,EAAA,SAAS,EAAC,aAA5E;AAA0F,EAAA,WAAW,EAAC,aAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EAIE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,IAAI,EAAC,kBAAxB;AAA2C,EAAA,QAAQ,EAAEA,iBAArD;AAAwE,EAAA,SAAS,EAAC,aAAlF;AAAgG,EAAA,WAAW,EAAC,YAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,EAKE;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,EAMGC,MAAM,CAACC,UAAP,CAAkBC,MAAlB,GAA2B,CAA3B,IAAgC;AAAM,EAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAiCF,MAAM,CAACC,UAAxC,CANnC,CADR;;AASA,MAAME,YAAY,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA,SAAvB;AAAkCC,EAAAA,WAAlC;AAA+CC,EAAAA;AAA/C,CAAD,KAA8D;AAClF,SAAOjB,QAAQ,CAACkB,YAAT,CACN;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAiC,IAAA,SAAS,EAAEH,SAA5C;AAAuD,IAAA,OAAO,EAAEC,WAAhE;AAA6E,IAAA,QAAQ,EAAC,GAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,GAAG,EAAEF,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,OAAO,EAAED,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,OAAO,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyD;AAAM,IAAA,CAAC,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,CADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QADH,CAJF,CADF,CADM,EAWNE,QAAQ,CAACC,IAXH,CAAP;AAaA,CAdD;;AAgBA,MAAMC,sBAAN,SAAqCvB,KAAK,CAACC,SAA3C,CAAqD;AAEnDuB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAoBnBf,iBApBmB,GAoBEgB,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACC,cAAN;AAD6B,4BAELD,KAAK,CAACE,MAFD;AAAA,YAErBC,IAFqB,iBAErBA,IAFqB;AAAA,YAEfC,KAFe,iBAEfA,KAFe;AAI7B,UAAInB,MAAM,GAAG,KAAKoB,KAAL,CAAWpB,MAAxB;;AAEA,cAAQkB,IAAR;AACA,aAAK,iBAAL;AACE,cAAIG,KAAK,CAACF,KAAD,CAAT,EAAkB;AAChBnB,YAAAA,MAAM,CAACsB,eAAP,GAAyB,yBAAzB;AACD,WAFD,MAEO;AACLtB,YAAAA,MAAM,CAACsB,eAAP,GAAyB,EAAzB;AACD;;AACD;;AACF,aAAK,YAAL;AACE,cAAIH,KAAK,CAACjB,MAAN,IAAgB,CAApB,EAAuB;AACrBF,YAAAA,MAAM,CAACC,UAAP,GAAoB,EAApB;AACD,WAFD,MAEO,IAAIkB,KAAK,CAACjB,MAAN,IAAgB,EAApB,EAAwB;AAC7BF,YAAAA,MAAM,CAACC,UAAP,GAAoB,+BAApB;AACD,WAFM,MAEA;AACLD,YAAAA,MAAM,CAACC,UAAP,GAAoB,EAApB;AACD;;AACH;AACE;AAjBF;;AAoBA,WAAKsB,QAAL,CAAc;AAACvB,QAAAA,MAAD;AAAS,SAACkB,IAAD,GAAQC,KAAjB;AAAwBK,QAAAA,KAAK,EAAC;AAA9B,OAAd;AACD,KA/CkB;;AAAA,SAiDnB1B,YAjDmB,GAiDHiB,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAG,KAAKI,KAAL,CAAWpB,MAAX,CAAkBC,UAAlB,CAA6BC,MAA7B,IAAuC,CAAvC,IAA4C,KAAKkB,KAAL,CAAWI,KAAX,IAAoB,IAAnE,EAAyE;AACvE,aAAKC,QAAL,CAAc,KAAKL,KAAL,CAAWM,gBAAzB,EAA2C,KAAKN,KAAL,CAAWO,gBAAtD,EAAwE,KAAKP,KAAL,CAAWnB,UAAnF,EAA+F,KAAKmB,KAAL,CAAWQ,gBAA1G;AACD,OAFD,MAEK;AACHC,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd;AACD;AACF,KAxDkB;;AAAA,SA0DnBC,SA1DmB,GA0DP,MAAM;AACnB,WAAKR,QAAL,CAAc;AACbS,QAAAA,MAAM,EAAE;AADK,OAAd;AAGE,KA9DkB;;AAAA,SAgEnB5B,UAhEmB,GAgEN,MAAM;AACnB,WAAKmB,QAAL,CAAc;AACZS,QAAAA,MAAM,EAAE;AADI,OAAd;AAGC,KApEkB;;AAAA,SAsEnB1B,SAtEmB,GAsENS,KAAD,IAAW;AACxB,aAAOA,KAAK,CAACkB,OAAN,KAAkB,EAAlB,IAAwB,KAAK7B,UAAL,EAA/B;AACE,KAxEkB;;AAAA,SA0EnBG,WA1EmB,GA0EJQ,KAAD,IAAW;AACxB,UAAI,KAAKmB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBpB,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKb,UAAL;AACD,KA7EmB;;AAAA,SA+EnBqB,QA/EmB,GA+ER,CAACH,eAAD,EAAkBK,gBAAlB,EAAoC1B,UAApC,EAAgD2B,gBAAhD,KAAqE;AAE9E,UAAIQ,IAAI,GAAG,KAAKtB,KAAL,CAAWsB,IAAtB;AACA,UAAIC,QAAQ,GAAG,KAAKvB,KAAL,CAAWuB,QAA1B;AACA,UAAIC,eAAe,GAAG,KAAKxB,KAAL,CAAWwB,eAAjC;AACA,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,cAAc,GAAG,KAAK1B,KAAL,CAAW0B,cAAhC;AACA,UAAIC,QAAQ,GAAG,KAAK3B,KAAL,CAAW4B,OAA1B;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY5C,UAAZ,EAAwB,KAAxB,CAAb;AACAL,MAAAA,SAAS,CAACkD,GAAV,CAAc;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAAd,EAT8E,CASxC;AAEtC;;AACAX,MAAAA,IAAI,CAACY,GAAL,CAASC,mBAAT,CAA6BR,QAA7B,EAAuC,CAACS,GAAD,EAAMC,OAAN,KAAkB;AACvD;AACAd,QAAAA,QAAQ,CAACe,OAAT,CAAiBC,iBAAjB,CAAmCZ,QAAnC,EAA6Ca,IAA7C,CAAkD;AAACT,UAAAA,IAAI,EAAEJ;AAAP,SAAlD,EAAoE,CAACX,KAAD,EAAQyB,KAAR,KAAkB;AAChF,cAAIzB,KAAJ,EAAW;AACPD,YAAAA,OAAO,CAAC2B,GAAR,CAAY1B,KAAZ;AACH,WAFD,MAEO;AAEH;AACA,gBAAI2B,CAAC,GAAG,IAAI7D,SAAJ,CAAc0B,eAAd,CAAR;AACA,gBAAIoC,GAAG,GAAGtB,IAAI,CAACuB,KAAL,CAAWC,OAAX,CAAmBH,CAAC,CAACI,QAAF,CAAW,EAAX,CAAnB,EAAmC,OAAnC,CAAV;AACA,gBAAI1C,KAAK,GAAGiB,IAAI,CAACuB,KAAL,CAAWG,KAAX,CAAiBJ,GAAG,CAACG,QAAJ,EAAjB,EAAiC,OAAjC,CAAZ;AAEA,gBAAIE,GAAG,GAAG,CACR;AAAEC,cAAAA,IAAI,EAAE,SAAR;AAAmB7C,cAAAA,KAAK,EAAEsB;AAA1B,aADQ,EAER;AAAEuB,cAAAA,IAAI,EAAE,SAAR;AAAmB7C,cAAAA,KAAK,EAAEQ;AAA1B,aAFQ,EAGR;AAAEqC,cAAAA,IAAI,EAAE,SAAR;AAAmB7C,cAAAA,KAAK,EAAEA;AAA1B,aAHQ,EAIR;AAAE6C,cAAAA,IAAI,EAAE,SAAR;AAAmB7C,cAAAA,KAAK,EAAEoC,KAAK,CAACM,QAAN;AAA1B,aAJQ,CAAV;AAOAhC,YAAAA,OAAO,CAAC2B,GAAR,CAAYO,GAAZ;;AACA,kBAAME,QAAQ,GAAGtE,SAAS,CAACuE,IAAV,CAAeC,SAAf,CAAyBJ,GAAzB,CAAjB;;AACAlC,YAAAA,OAAO,CAAC2B,GAAR,oBAAwBS,QAAxB;;AAEA,kBAAMG,UAAU,GAAGzE,SAAS,CAAC0E,IAAV,CAAezC,gBAAf,EAAiCqC,QAAjC,CAAnB;;AAEApC,YAAAA,OAAO,CAAC2B,GAAR,sBAA0BY,UAA1B,GApBG,CAqBH;;AACAhC,YAAAA,IAAI,CAACY,GAAL,CAASsB,WAAT,GAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACtC3C,cAAAA,OAAO,CAAC2B,GAAR,CAAY,qBAAZ,EAAmCgB,QAAnC;AACAnC,cAAAA,QAAQ,CAACe,OAAT,CAAiBqB,iBAAjB,CAAmChC,QAAnC,EAA6Cd,gBAA7C,EAA+DR,KAA/D,EAAsEiD,UAAtE,EAAkFM,WAAlF,CAA8F;AAACC,gBAAAA,GAAG,EAAEH,QAAN;AAAgB3B,gBAAAA,IAAI,EAAEJ;AAAtB,eAA9F,EAA+H,UAASX,KAAT,EAAgB8C,SAAhB,EAA2B;AACtJ,oBAAI9C,KAAJ,EAAW;AACPD,kBAAAA,OAAO,CAAC2B,GAAR,CAAY1B,KAAZ;AAEH,iBAHD,MAGO;AACPD,kBAAAA,OAAO,CAAC2B,GAAR,CAAY,yBAAZ,EAAuCoB,SAAvC;AAEA,wBAAMC,QAAQ,GAAG;AACbtB,oBAAAA,KAAK,EAAEnB,IAAI,CAACuB,KAAL,CAAWmB,KAAX,CAAiB3B,OAAjB,CADM;AAEb4B,oBAAAA,QAAQ,EAAE3C,IAAI,CAACuB,KAAL,CAAWmB,KAAX,CAAiBF,SAAS,GAAC,CAA3B,CAFG;AAE4B;AACzCJ,oBAAAA,QAAQ,EAAEpC,IAAI,CAACuB,KAAL,CAAWmB,KAAX,CAAiBN,QAAQ,GAAC,CAA1B,CAHG;AAIbQ,oBAAAA,EAAE,EAAE1C,eAJS;AAKb2C,oBAAAA,IAAI,EAAE5C,QAAQ,CAACe,OAAT,CAAiBqB,iBAAjB,CAAmChC,QAAnC,EAA6Cd,gBAA7C,EAA+DR,KAA/D,EAAsEiD,UAAtE,EAAkFc,SAAlF;AALO,mBAAjB;AAOArD,kBAAAA,OAAO,CAAC2B,GAAR,CAAYqB,QAAZ,EAVO,CAYP;;AACA,wBAAMM,EAAE,GAAG,IAAI3F,EAAJ,CAAOqF,QAAP,EAAiB;AAAEO,oBAAAA,KAAK,EAAE,SAAT;AAAoBC,oBAAAA,QAAQ,EAAE;AAA9B,mBAAjB,CAAX;AACAF,kBAAAA,EAAE,CAACd,IAAH,CAAQ1B,IAAR;AAEA,wBAAM2C,qBAAqB,GAAGH,EAAE,CAACI,SAAH,EAA9B;AACA,wBAAMC,KAAK,GAAG,OAAOF,qBAAqB,CAACzB,QAAtB,CAA+B,KAA/B,CAArB;AAEAhC,kBAAAA,OAAO,CAAC2B,GAAR,CAAYgC,KAAZ,EAnBO,CAsBP;;AACApD,kBAAAA,IAAI,CAACY,GAAL,CAASyC,qBAAT,CAA+BD,KAA/B,EACCE,IADD,CACM,iBADN,EACyB,UAASxB,IAAT,EAAc;AACnCrC,oBAAAA,OAAO,CAAC2B,GAAR,CAAY,uBAAZ,EAAqCU,IAArC;AACA3B,oBAAAA,KAAK,CAAChB,QAAN,CAAe;AACboE,sBAAAA,MAAM,EAAEzB,IADK;AAEb0B,sBAAAA,WAAW,EAAE,IAFA;AAGbC,sBAAAA,mBAAmB,EAAE;AAHR,qBAAf;AAKAtD,oBAAAA,KAAK,CAACR,SAAN;AACH,mBATD,EAUC2D,IAVD,CAUM,cAVN,EAUsB,UAASI,UAAT,EAAqBC,OAArB,EAA6B;AAC/ClE,oBAAAA,OAAO,CAAC2B,GAAR,CAAY,mCAAZ,EAAiDsC,UAAjD;AACAjE,oBAAAA,OAAO,CAAC2B,GAAR,CAAY,iCAAZ,EAA+CuC,OAA/C;AACAvD,oBAAAA,cAAc;AAEdD,oBAAAA,KAAK,CAAChB,QAAN,CAAe;AACbyE,sBAAAA,SAAS,EAAED,OADE;AAEbF,sBAAAA,mBAAmB,EAAE,IAFR;AAGbD,sBAAAA,WAAW,EAAE;AAHA,qBAAf;AAKArD,oBAAAA,KAAK,CAACR,SAAN;AACH,mBArBD,EAsBCkE,EAtBD,CAsBI,OAtBJ,EAsBa,UAASnE,KAAT,EAAe;AAAED,oBAAAA,OAAO,CAAC2B,GAAR,CAAY1B,KAAZ;AAAoB,mBAtBlD;AAwBC;AACJ,eApDD;AAqDH,aAvDD;AAwDH;AACR,SAlFC;AAmFD,OArFD;AAsFD,KAjLkB;;AAElB,SAAKV,KAAL,GAAa;AACVuE,MAAAA,MAAM,EAAE,EADE;AAEVK,MAAAA,SAAS,EAAE,EAFD;AAGVtE,MAAAA,gBAAgB,EAAE,EAHR;AAIVC,MAAAA,gBAAgB,EAAE,EAJR;AAKV1B,MAAAA,UAAU,EAAE,EALF;AAMV2B,MAAAA,gBAAgB,EAAE,EANR;AAOZI,MAAAA,MAAM,EAAE,KAPI;AAQVhC,MAAAA,MAAM,EAAE;AACN0B,QAAAA,gBAAgB,EAAE,EADZ;AAENzB,QAAAA,UAAU,EAAE;AAFN,OARE;AAYVuB,MAAAA,KAAK,EAAE,KAZG;AAaVoE,MAAAA,WAAW,EAAE,KAbH;AAcVC,MAAAA,mBAAmB,EAAC;AAdV,KAAb;AAgBA;;AAgKE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDHK,EAAAA,MAAM,GAAG;AAER,WACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AACC,MAAA,YAAY,EAAE,KAAKpG,YADpB;AAEC,MAAA,iBAAiB,EAAE,KAAKC,iBAFzB;AAGC,MAAA,MAAM,EAAE,KAAKqB,KAAL,CAAWpB,MAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAME,KAAKoB,KAAL,CAAWY,MAAX,IACA,oBAAC,YAAD;AACC,MAAA,UAAU,EAAE,KAAK5B,UADlB;AAEC,MAAA,SAAS,EAAE,KAAKE,SAFjB;AAGC,MAAA,WAAW,EAAE,KAAKC,WAHnB;AAIC,MAAA,QAAQ,EAAE4F,CAAC,IAAI,KAAKjE,SAAL,GAAiBiE,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,KAAK/E,KAAL,CAAWwE,WAAX,GACE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/C,EACC,KAAKxE,KAAL,CAAWuE,MADZ,CADF,GAII,IATN,EAUG,KAAKvE,KAAL,CAAWyE,mBAAX,GACC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlD,8BAA+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/E,0BACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB,EAEC,KAAKzE,KAAL,CAAW4E,SAAX,CAAqBI,eAFtB,EAEsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFtC,oBAGc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHd,EAIC,KAAKhF,KAAL,CAAW4E,SAAX,CAAqBK,SAJtB,EAIgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJhC,sBAKgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALhB,EAMC,KAAKjF,KAAL,CAAW4E,SAAX,CAAqBM,WANtB,EAMkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANlC,eAOS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPT,EAQC,KAAKlF,KAAL,CAAW4E,SAAX,CAAqBO,OAArB,CAA6B1C,QAA7B,CAAsC,KAAtC,CARD,CADD,GAWG,IArBN,CAPF,CADH;AAmCA;;AA9QkD;;AAiRrD,eAAejD,sBAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\nvar EthCrypto = require(\"eth-crypto\");\nvar BigNumber = require('bignumber.js');\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit} noValidate>\n          <input type=\"text\" name=\"amountToTransfer\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Amount\"/>\n          <input type=\"text\" name=\"recipientAddress\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Recipient\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Private Key\"/>\n          <input type=\"text\" name=\"safetyPrivateKey\" onChange={handleInputChange} className=\"smartInput4\" placeholder=\"Safety Key\"/>\n          <button type=\"submit\" className=\"smartButton\">Transfer </button>\n          {errors.privateKey.length > 0 && <span className='errorMultiple'>{errors.privateKey}</span>}\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalTransferSafetyKey extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      safetyPrivateKey: '',\n  \t\tisOpen: false,\n      errors: {\n        amountToTransfer: '',\n        privateKey: ''\n      },\n      typed: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    let errors = this.state.errors;\n\n    switch (name) {\n    case 'amountToDeposit': \n      if (isNaN(value)) {\n        errors.amountToDeposit = 'Amount must be a number';\n      } else {\n        errors.amountToDeposit = '';\n      }\n      break;\n    case 'privateKey':\n      if (value.length == 0) {\n        errors.privateKey = ''; \n      } else if (value.length != 64) {\n        errors.privateKey = 'Private key length must be 64';\n      } else {\n        errors.privateKey = '';\n      }\n    default:\n      break;\n  }\n\n    this.setState({errors, [name]: value, typed:true});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if(this.state.errors.privateKey.length == 0 && this.state.typed == true) {\n      this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.safetyPrivateKey);\n    }else{\n      console.error('Invalid Form');\n    }\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  transfer = (amountToDeposit, recipientAddress, privateKey, safetyPrivateKey) => {\n\n    let web3 = this.props.web3;\n    let multisig = this.props.multisig;\n    let multisigAddress = this.props.multisigAddress;\n    let modal = this;\n    let updateBalances = this.props.updateBalances;\n    let addrFrom = this.props.address;\n    const priv = Buffer.from(privateKey, 'hex');\n    BigNumber.set({ DECIMAL_PLACES: 18 }) // We need it to convert large wei inputs\n\n    // Getting Ethereum transaction count\n    web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n      // Retrieving the current nonce inside the contract\n      multisig.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n            if (error) {\n                console.log(error)\n            } else {\n                \n                // The next few lines go around issues with big numbers\n                let x = new BigNumber(amountToDeposit);\n                let val = web3.utils.fromWei(x.toString(10), 'ether');\n                let value = web3.utils.toWei(val.toString(), 'ether');\n                \n                let msg = [\n                  { type: \"address\", value: addrFrom},\n                  { type: \"address\", value: recipientAddress},\n                  { type: \"uint256\", value: value},\n                  { type: \"uint256\", value: nonce.toString()}\n                ];\n\n                console.log(msg);\n                const _message = EthCrypto.hash.keccak256(msg); \n                console.log(`message: ${_message}`);\n                \n                const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n                console.log(`signature: ${_signature}`);\n                // Build the transaction\n                web3.eth.getGasPrice().then((gasPrice) => {\n                    console.log('Current gas price: ', gasPrice);    \n                    multisig.methods.verifyTransaction(addrFrom, recipientAddress, value, _signature).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                        if (error) {\n                            console.log(error);\n                            \n                        } else {\n                        console.log('Estimate of gas usage: ', gasAmount);\n                        \n                        const txObject = {\n                            nonce: web3.utils.toHex(txCount),\n                            gasLimit: web3.utils.toHex(gasAmount*3), // For testing, so transactions accepted faster\n                            gasPrice: web3.utils.toHex(gasPrice*3),\n                            to: multisigAddress,\n                            data: multisig.methods.verifyTransaction(addrFrom, recipientAddress, value, _signature).encodeABI()\n                        };\n                        console.log(txObject);\n\n                        // Sign the transaction\n                        const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                        tx.sign(priv);\n\n                        const serializedTransaction = tx.serialize();\n                        const rawTx = '0x' + serializedTransaction.toString('hex');\n                        \n                        console.log(rawTx);\n                        \n                        \n                        // Broadcast the transaction\n                        web3.eth.sendSignedTransaction(rawTx)\n                        .once('transactionHash', function(hash){ \n                            console.log('Hash of transaction: ', hash);\n                            modal.setState({ \n                              txHash: hash,\n                              hashReceipt: true,\n                              confirmationReceipt: false                       \n                            });\n                            modal.openModal();\n                        })\n                        .once('confirmation', function(confNumber, receipt){ \n                            console.log('Transaction confirmation number: ', confNumber);\n                            console.log('Second receipt of transaction: ', receipt);\n                            updateBalances();\n                    \n                            modal.setState({ \n                              txReceipt: receipt,\n                              confirmationReceipt: true, \n                              hashReceipt: false\n                            });\n                            modal.openModal(); \n                        })\n                        .on('error', function(error){ console.log(error) });\n                        \n                        }\n                    })\n                })\n            }\n    })\n    })\n  }\n     /* // Build the transaction\n        web3.eth.getGasPrice().then((gasPrice) => {\n            multisig.methods.deposit().estimateGas({gas: gasPrice, from: this.props.address, value: amountToDeposit}, function(error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount * 5), // testing\n                    gasPrice: web3.utils.toHex(gasPrice * 5), // Pay Higher Price for testing purposes\n                    to: multisigAddress,\n                    value: web3.utils.toHex(amountToDeposit),\n                    data: multisig.methods.deposit(safetyPubKey).encodeABI()\n                };\n                console.log(txObject);\n\n                // Sign the transaction\n                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                tx.sign(priv);\n\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                \n                console.log(rawTx);\n\n                // Broadcast the transaction\n                web3.eth.sendSignedTransaction(rawTx)\n                .once('transactionHash', function(hash){ \n                    console.log('Hash of transaction: ', hash)\n                    modal.setState({ \n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false                       \n                    });\n                    modal.openModal();\n                })\n                .once('confirmation', function(confNumber, receipt){ \n                    console.log('Transaction confirmation number: ', confNumber) \n                    console.log('Transaction receipt: ', receipt)\n                    updateBalances();\n                    \n                    modal.setState({ \n                      txReceipt: receipt,\n                      confirmationReceipt: true, \n                      hashReceipt: false\n                    });\n                    modal.openModal(); \n                })\n                .on('error', function(error){ console.log(error) });\n            })\n        })\n    })*/\n  \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <p className=\"modalTextTx\">Transaction hash is:<br/>\n            {this.state.txHash}\n            </p> \n            : null} \n          {this.state.confirmationReceipt ?\n            <p className=\"modalTextTx\">Transaction confirmed! <br/>Please view the receipt:<br/>\n            Transaction hash is:<br/>\n            {this.state.txReceipt.transactionHash}<br/>\n            Block hash is:<br/>\n            {this.state.txReceipt.blockHash}<br/>\n            Block number is:<br/>\n            {this.state.txReceipt.blockNumber}<br/>\n            Gas used:<br/>\n            {this.state.txReceipt.gasUsed.toString('hex')}\n            </p> \n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalTransferSafetyKey;"]},"metadata":{},"sourceType":"module"}