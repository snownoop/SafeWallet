{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContractUI from './SmartContractUI';\nimport Login from './LoginForm';\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    this.setState({\n      web3\n    });\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    let my = this;\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig\n    });\n    web3.eth.getBalance(this.state.account).then(result => {\n      my.setState({\n        etherBalance: result\n      });\n      console.log({\n        etherBalance: result\n      });\n    });\n    this.state.multisig.methods.transactionNonces(this.state.account).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        my.setState({\n          nonce: result\n        });\n      }\n    });\n    this.state.multisig.methods.balances(this.state.account).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        console.log(result);\n        my.setState({\n          balance: result\n        });\n      } else {\n        console.log(error);\n      }\n    });\n    this.setState({\n      loading: false\n    });\n  }\n  /*\n    componentDidMount() {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n      this.setState({ web3: web3 });\n    }*/\n\n\n  constructor(props) {\n    super(props);\n\n    this.getEtherBalance = () => {\n      this.state.web3.eth.getBalance(this.state.account).then(result => {\n        this.setState({\n          etherBalance: result\n        });\n        console.log({\n          etherBalance: result\n        });\n      });\n    };\n\n    this.getContractBalance = () => {\n      this.state.multisig.methods.balances(this.state.account).call({\n        from: this.state.account\n      }, (error, result) => {\n        if (!error) {\n          console.log(result);\n          this.setState({\n            balance: result\n          });\n        }\n      });\n    };\n\n    this.state = {\n      account: '',\n      web3: '',\n      balance: '',\n      safetyKey: '',\n      nonce: '',\n      loading: true\n    };\n    this.deposit = this.deposit.bind(this);\n    this.depositSafely = this.depositSafely.bind(this);\n    this.getSafetyAddress = this.getSafetyAddress.bind(this);\n    this.getNonce = this.getNonce.bind(this);\n    this.transfer = this.transfer.bind(this);\n  }\n\n  async getSafetyAddress(address) {\n    this.setState({\n      loading: true\n    });\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.safetyKeys(address).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        my.setState({\n          safetyKey: result\n        });\n        res = result;\n      }\n\n      my.setState({\n        loading: false\n      });\n    });\n    return res;\n  }\n\n  async getNonce(address) {\n    this.setState({\n      loading: true\n    });\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.transactionNonces(this.state.account).call({\n      from: this.state.account\n    }, function (error, result) {\n      if (!error) {\n        my.setState({\n          nonce: result\n        });\n        res = result;\n      }\n    });\n    my.setState({\n      loading: false\n    });\n    return res;\n  }\n\n  deposit(amount) {\n    this.setState({\n      loading: true\n    });\n    console.log({\n      account: this.state.account,\n      amount: amount\n    });\n    this.state.multisig.methods.deposit().send({\n      value: amount,\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  depositSafely(amount, address) {\n    this.setState({\n      loading: true\n    });\n    this.state.multisig.methods.deposit(address).send({\n      value: amount,\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  transfer(addressTo, amount, signature) {\n    this.setState({\n      loading: true\n    });\n    console.log({\n      from: this.state.account,\n      to: addressTo,\n      amount: amount,\n      sig: signature\n    });\n    this.state.multisig.methods.verifyTransaction(this.state.account, addressTo, amount, signature).send({\n      from: this.state.account\n    }).once('receipt', receipt => {\n      console.log(receipt);\n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid dappMainStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      role: \"main\",\n      className: \"col-lg-12 d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.loading ? React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Loading...\")) : React.createElement(SmartContractUI, {\n      balance: this.state.balance,\n      address: this.state.account,\n      safetyKey: this.state.safetyKey,\n      deposit: this.deposit,\n      depositSafely: this.depositSafely,\n      getSafetyAddress: this.getSafetyAddress,\n      getNonce: this.getNonce,\n      transfer: this.transfer,\n      etherBalance: this.state.etherBalance,\n      nonce: this.state.nonce,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/App.js"],"names":["React","Component","Web3","MULTISIG_ABI","MULTISIG_ADDRESS","SmartContractUI","Login","App","componentWillMount","loadBlockchainData","web3","givenProvider","setState","accounts","eth","getAccounts","account","my","multisig","Contract","getBalance","state","then","result","etherBalance","console","log","methods","transactionNonces","call","from","error","nonce","balances","balance","loading","constructor","props","getEtherBalance","getContractBalance","safetyKey","deposit","bind","depositSafely","getSafetyAddress","getNonce","transfer","address","res","safetyKeys","amount","send","value","once","receipt","addressTo","signature","to","sig","verifyTransaction","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,UAA/C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAE1BO,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,kBAAL;AACD;;AAED,QAAMA,kBAAN,GAA2B;AACzB,UAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACS,aAAL,IAAsB,uBAA/B,CAAb;AACA,SAAKC,QAAL,CAAc;AAAEF,MAAAA;AAAF,KAAd;AACA,UAAMG,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB;AACA,SAAKH,QAAL,CAAc;AAAEI,MAAAA,OAAO,EAAEH,QAAQ,CAAC,CAAD;AAAnB,KAAd;AACA,QAAII,EAAE,GAAG,IAAT;AACA,UAAMC,QAAQ,GAAG,IAAIR,IAAI,CAACI,GAAL,CAASK,QAAb,CAAsBhB,YAAtB,EAAoCC,gBAApC,CAAjB;AACA,SAAKQ,QAAL,CAAc;AAAEM,MAAAA;AAAF,KAAd;AACAR,IAAAA,IAAI,CAACI,GAAL,CAASM,UAAT,CAAoB,KAAKC,KAAL,CAAWL,OAA/B,EAAwCM,IAAxC,CAA6CC,MAAM,IAAI;AACrDN,MAAAA,EAAE,CAACL,QAAH,CAAY;AAAEY,QAAAA,YAAY,EAAGD;AAAjB,OAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,QAAAA,YAAY,EAAGD;AAAjB,OAAZ;AACD,KAHD;AAIA,SAAKF,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BC,iBAA5B,CAA8C,KAAKP,KAAL,CAAWL,OAAzD,EAAkEa,IAAlE,CAAuE;AAAEC,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAnB,KAAvE,EAAqG,UAASe,KAAT,EAAgBR,MAAhB,EAAuB;AACxH,UAAI,CAACQ,KAAL,EAAY;AACVd,QAAAA,EAAE,CAACL,QAAH,CAAY;AAAEoB,UAAAA,KAAK,EAAGT;AAAV,SAAZ;AACD;AACF,KAJH;AAMA,SAAKF,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BM,QAA5B,CAAqC,KAAKZ,KAAL,CAAWL,OAAhD,EAAyDa,IAAzD,CAA8D;AAAEC,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAnB,KAA9D,EAA4F,UAASe,KAAT,EAAgBR,MAAhB,EAAuB;AACjH,UAAI,CAACQ,KAAL,EAAY;AACVN,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAN,QAAAA,EAAE,CAACL,QAAH,CAAY;AAAEsB,UAAAA,OAAO,EAAGX;AAAZ,SAAZ;AACD,OAHD,MAGO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACD;AACF,KAPD;AAQA,SAAKnB,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAG;AAAZ,KAAd;AACD;AACH;;;;;;;AAKEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBnBC,eAjBmB,GAiBD,MAAM;AACtB,WAAKjB,KAAL,CAAWX,IAAX,CAAgBI,GAAhB,CAAoBM,UAApB,CAA+B,KAAKC,KAAL,CAAWL,OAA1C,EAAmDM,IAAnD,CAAwDC,MAAM,IAAI;AAChE,aAAKX,QAAL,CAAc;AAAEY,UAAAA,YAAY,EAAGD;AAAjB,SAAd;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,UAAAA,YAAY,EAAGD;AAAjB,SAAZ;AACD,OAHD;AAID,KAtBkB;;AAAA,SAwBnBgB,kBAxBmB,GAwBE,MAAM;AACzB,WAAKlB,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BM,QAA5B,CAAqC,KAAKZ,KAAL,CAAWL,OAAhD,EAAyDa,IAAzD,CAA8D;AAAEC,QAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAnB,OAA9D,EAA4F,CAACe,KAAD,EAAQR,MAAR,KAAmB;AAC3G,YAAI,CAACQ,KAAL,EAAY;AACVN,UAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,eAAKX,QAAL,CAAc;AAAEsB,YAAAA,OAAO,EAAGX;AAAZ,WAAd;AACD;AACF,OALH;AAMD,KA/BkB;;AAEjB,SAAKF,KAAL,GAAa;AACXL,MAAAA,OAAO,EAAE,EADE;AAEXN,MAAAA,IAAI,EAAE,EAFK;AAGXwB,MAAAA,OAAO,EAAE,EAHE;AAIXM,MAAAA,SAAS,EAAE,EAJA;AAKXR,MAAAA,KAAK,EAAE,EALI;AAMXG,MAAAA,OAAO,EAAE;AANE,KAAb;AAQA,SAAKM,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKI,QAAL,GAAgB,KAAKA,QAAL,CAAcJ,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAkBD,QAAME,gBAAN,CAAuBG,OAAvB,EAAgC;AAC9B,SAAKnC,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIlB,EAAE,GAAG,IAAT;AACA,QAAI+B,GAAG,GAAG,EAAV;AACA,UAAM,KAAK3B,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BsB,UAA5B,CAAuCF,OAAvC,EAAgDlB,IAAhD,CAAqD;AAAEC,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAnB,KAArD,EAAmF,UAASe,KAAT,EAAgBR,MAAhB,EAAuB;AAC5G,UAAI,CAACQ,KAAL,EAAY;AACVd,QAAAA,EAAE,CAACL,QAAH,CAAY;AAAE4B,UAAAA,SAAS,EAAGjB;AAAd,SAAZ;AACAyB,QAAAA,GAAG,GAAGzB,MAAN;AACD;;AACDN,MAAAA,EAAE,CAACL,QAAH,CAAY;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAZ;AACD,KANG,CAAN;AAOA,WAAOa,GAAP;AACD;;AAED,QAAMH,QAAN,CAAeE,OAAf,EAAwB;AACtB,SAAKnC,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIlB,EAAE,GAAG,IAAT;AACA,QAAI+B,GAAG,GAAG,EAAV;AACA,UAAM,KAAK3B,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BC,iBAA5B,CAA8C,KAAKP,KAAL,CAAWL,OAAzD,EAAkEa,IAAlE,CAAuE;AAAEC,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAnB,KAAvE,EAAqG,UAASe,KAAT,EAAgBR,MAAhB,EAAuB;AAC9H,UAAI,CAACQ,KAAL,EAAY;AACVd,QAAAA,EAAE,CAACL,QAAH,CAAY;AAAEoB,UAAAA,KAAK,EAAGT;AAAV,SAAZ;AACAyB,QAAAA,GAAG,GAAGzB,MAAN;AACD;AACF,KALG,CAAN;AAMAN,IAAAA,EAAE,CAACL,QAAH,CAAY;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAZ;AACA,WAAOa,GAAP;AACD;;AAEDP,EAAAA,OAAO,CAACS,MAAD,EAAS;AACd,SAAKtC,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEV,MAAAA,OAAO,EAAG,KAAKK,KAAL,CAAWL,OAAvB;AAAgCkC,MAAAA,MAAM,EAAGA;AAAzC,KAAZ;AACA,SAAK7B,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4Bc,OAA5B,GAAsCU,IAAtC,CAA2C;AAAEC,MAAAA,KAAK,EAAEF,MAAT;AAAiBpB,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAlC,KAA3C,EACCqC,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B7B,MAAAA,OAAO,CAACC,GAAR,CAAY4B,OAAZ;AAEA,WAAKhB,eAAL;AACA,WAAKC,kBAAL;AACA,WAAK3B,QAAL,CAAc;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAPD;AAQD;;AAEDQ,EAAAA,aAAa,CAACO,MAAD,EAASH,OAAT,EAAkB;AAC7B,SAAKnC,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKd,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4Bc,OAA5B,CAAoCM,OAApC,EAA6CI,IAA7C,CAAkD;AAAEC,MAAAA,KAAK,EAAEF,MAAT;AAAiBpB,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAlC,KAAlD,EACCqC,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B7B,MAAAA,OAAO,CAACC,GAAR,CAAY4B,OAAZ;AAEA,WAAKhB,eAAL;AACA,WAAKC,kBAAL;AACA,WAAK3B,QAAL,CAAc;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAPD;AAQD;;AAEDW,EAAAA,QAAQ,CAACS,SAAD,EAAYL,MAAZ,EAAoBM,SAApB,EAA+B;AACrC,SAAK5C,QAAL,CAAc;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACI,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL,OAAlB;AAA2ByC,MAAAA,EAAE,EAAEF,SAA/B;AAA0CL,MAAAA,MAAM,EAAEA,MAAlD;AAA0DQ,MAAAA,GAAG,EAAEF;AAA/D,KAAZ;AACA,SAAKnC,KAAL,CAAWH,QAAX,CAAoBS,OAApB,CAA4BgC,iBAA5B,CAA8C,KAAKtC,KAAL,CAAWL,OAAzD,EAAkEuC,SAAlE,EAA6EL,MAA7E,EAAqFM,SAArF,EAAgGL,IAAhG,CAAqG;AAACrB,MAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWL;AAAlB,KAArG,EACCqC,IADD,CACM,SADN,EACkBC,OAAD,IAAa;AAC5B7B,MAAAA,OAAO,CAACC,GAAR,CAAY4B,OAAZ;AAEA,WAAKhB,eAAL;AACA,WAAKC,kBAAL;AACA,WAAK3B,QAAL,CAAc;AAAEuB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAPD;AAQD;;AAGDyB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,SAAS,EAAC,yCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKvC,KAAL,CAAWc,OAAX,GACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAiB,MAAA,SAAS,EAAC,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAzC,CADF,GAEE,oBAAC,eAAD;AACF,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWa,OADlB;AAEF,MAAA,OAAO,EAAE,KAAKb,KAAL,CAAWL,OAFlB;AAGF,MAAA,SAAS,EAAE,KAAKK,KAAL,CAAWmB,SAHpB;AAIF,MAAA,OAAO,EAAE,KAAKC,OAJZ;AAKF,MAAA,aAAa,EAAE,KAAKE,aALlB;AAMF,MAAA,gBAAgB,EAAE,KAAKC,gBANrB;AAOF,MAAA,QAAQ,EAAE,KAAKC,QAPb;AAQF,MAAA,QAAQ,EAAE,KAAKC,QARb;AASF,MAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWG,YATvB;AAUF,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWW,KAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN,CADF,CADF,CADF,CADF;AAyBD;;AArKyB;;AAwK5B,eAAezB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContractUI from './SmartContractUI';\nimport Login from './LoginForm';\n\nclass App extends Component {\n\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    this.setState({ web3 });\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    let my = this;\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({ multisig });\n    web3.eth.getBalance(this.state.account).then(result => {\n      my.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n    this.state.multisig.methods.transactionNonces(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          my.setState({ nonce : result });\n        }\n      });\n\n    this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, function(error, result){\n      if (!error) {\n        console.log(result);\n        my.setState({ balance : result });\n      } else {\n        console.log(error);\n      }\n    });\n    this.setState({ loading : false });\n  }\n/*\n  componentDidMount() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\");\n    this.setState({ web3: web3 });\n  }*/\n  constructor(props) {\n    super(props);\n    this.state = { \n      account: '',\n      web3: '',\n      balance: '',\n      safetyKey: '',\n      nonce: '',\n      loading: true\n    };\n    this.deposit = this.deposit.bind(this);\n    this.depositSafely = this.depositSafely.bind(this);\n    this.getSafetyAddress = this.getSafetyAddress.bind(this);\n    this.getNonce = this.getNonce.bind(this);\n    this.transfer = this.transfer.bind(this);\n  }\n\n  getEtherBalance = () => {\n    this.state.web3.eth.getBalance(this.state.account).then(result => {\n      this.setState({ etherBalance : result});\n      console.log({ etherBalance : result});\n    });\n  }\n\n  getContractBalance = () => {\n    this.state.multisig.methods.balances(this.state.account).call({ from: this.state.account }, (error, result) => {\n        if (!error) {\n          console.log(result);\n          this.setState({ balance : result });\n        }\n      });\n  }\n\n  async getSafetyAddress(address) {\n    this.setState({ loading: true })\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.safetyKeys(address).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          my.setState({ safetyKey : result });\n          res = result;\n        }\n        my.setState({ loading: false });\n      });\n    return res;\n  }\n\n  async getNonce(address) {\n    this.setState({ loading: true })\n    let my = this;\n    let res = '';\n    await this.state.multisig.methods.transactionNonces(this.state.account).call({ from: this.state.account }, function(error, result){\n        if (!error) {\n          my.setState({ nonce : result });\n          res = result;\n        }\n      });\n    my.setState({ loading: false });\n    return res;\n  }\n\n  deposit(amount) {\n    this.setState({ loading: true })\n    console.log({ account : this.state.account, amount : amount })\n    this.state.multisig.methods.deposit().send({ value: amount, from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);    \n\n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({ loading: false })\n    })\n  }\n\n  depositSafely(amount, address) {\n    this.setState({ loading: true })\n    this.state.multisig.methods.deposit(address).send({ value: amount, from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);\n    \n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({ loading: false })\n    })\n  }\n\n  transfer(addressTo, amount, signature) {\n    this.setState({ loading: true })\n    console.log({from: this.state.account, to: addressTo, amount: amount, sig: signature})\n    this.state.multisig.methods.verifyTransaction(this.state.account, addressTo, amount, signature).send({from: this.state.account })\n    .once('receipt', (receipt) => {\n      console.log(receipt);\n      \n      this.getEtherBalance();\n      this.getContractBalance();\n      this.setState({ loading: false })\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-fluid dappMainStyle\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center\">\n              { this.state.loading \n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div> \n                : <SmartContractUI \n                balance={this.state.balance}\n                address={this.state.account} \n                safetyKey={this.state.safetyKey}\n                deposit={this.deposit}\n                depositSafely={this.depositSafely}\n                getSafetyAddress={this.getSafetyAddress}\n                getNonce={this.getNonce}\n                transfer={this.transfer}\n                etherBalance={this.state.etherBalance}\n                nonce={this.state.nonce}\n                /> \n              }\n            </main>\n          </div>\n        </div>\n      </div>  \n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}