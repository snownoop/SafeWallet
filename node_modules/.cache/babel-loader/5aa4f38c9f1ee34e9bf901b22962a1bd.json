{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/Modal.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({\n  toggle,\n  generateSecret\n}) => React.createElement(\"button\", {\n  className: \"smartButtonLong\",\n  onClick: () => {\n    toggle();\n    generateSecret();\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5\n  },\n  __self: this\n}, \"enable two-factor authentication\");\n\nconst ModalContent = ({\n  toggle,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        isOpen: !this.state.isOpen,\n        notVerified: true\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.toggle();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.toggle();\n    };\n\n    this.tokenInputHandler = event => {\n      this.setState({\n        token: event.target.value\n      });\n    };\n\n    this.generateSecret = () => {\n      var xhttp = new XMLHttpRequest();\n      var data = {\n        address: this.props.address\n      };\n\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4) {\n          // request is done\n          if (xhttp.status === 200) {\n            // successfully\n            var obj = JSON.parse(xhttp.responseText);\n            console.log(obj.secret);\n            this.setState({\n              secret: obj.secret\n            });\n          }\n        }\n      };\n\n      xhttp.open(\"POST\", \"http://localhost:5597/totp-generate\", true);\n      xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhttp.send(JSON.stringify(data));\n    };\n\n    this.verifyToken = () => {\n      var xhttp = new XMLHttpRequest();\n      var data = {\n        token: this.state.token,\n        address: this.props.address\n      };\n\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4) {\n          // request is done\n          if (xhttp.status === 200) {\n            // successfully\n            var obj = JSON.parse(xhttp.responseText);\n            console.log(obj.verified);\n            this.setState({\n              goodToken: obj.verified\n            });\n          }\n        }\n      };\n\n      console.log(data);\n      xhttp.open(\"POST\", \"http://localhost:5596/totp-verify\", true);\n      xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhttp.send(JSON.stringify(data));\n      this.setState({\n        notVerified: false\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      token: '',\n      secret: '',\n      notVerified: true,\n      goodToken: false\n    };\n  }\n\n  render() {\n    const verifyTokenBtn = React.createElement(\"form\", {\n      onSubmit: console.log(this.state.token),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"token\",\n      onChange: this.tokenInputHandler,\n      className: \"modalInput\",\n      placeholder: \"Token\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"modalButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"submit token\"));\n    const correctToken = React.createElement(\"p\", {\n      className: \"successToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"The token submitted is correct.\");\n    const incorrectToken = React.createElement(\"p\", {\n      className: \"failToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"The token submitted is incorrect.\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      toggle: this.toggle,\n      generateSecret: this.generateSecret,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      toggle: this.toggle,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Two-factor authentication\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"modalImg\",\n      src: this.state.secret,\n      alt: \"Generic placeholder image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), this.state.notVerified ? verifyTokenBtn : this.state.goodToken ? correctToken : incorrectToken));\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/Modal.js"],"names":["React","Component","ReactDOM","ModalTrigger","toggle","generateSecret","ModalContent","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","Modal","constructor","props","setState","isOpen","state","notVerified","event","keyCode","modalNode","contains","target","tokenInputHandler","token","value","xhttp","XMLHttpRequest","data","address","onreadystatechange","readyState","status","obj","JSON","parse","responseText","console","log","secret","open","setRequestHeader","send","stringify","verifyToken","verified","goodToken","render","verifyTokenBtn","correctToken","incorrectToken","n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAD,KAA8B;AAAQ,EAAA,SAAS,EAAC,iBAAlB;AAAoC,EAAA,OAAO,EAAE,MAAM;AAAED,IAAAA,MAAM;AAAIC,IAAAA,cAAc;AAAK,GAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAnD;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACF,EAAAA,MAAD;AAASG,EAAAA,QAAT;AAAmBC,EAAAA,SAAnB;AAA8BC,EAAAA,WAA9B;AAA2CC,EAAAA;AAA3C,CAAD,KAA0D;AAC9E,SAAOR,QAAQ,CAACS,YAAT,CACN;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAiC,IAAA,SAAS,EAAEH,SAA5C;AAAuD,IAAA,OAAO,EAAEC,WAAhE;AAA6E,IAAA,QAAQ,EAAC,GAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAEF,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,OAAO,EAAEH,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,OAAO,EAAC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyD;AAAM,IAAA,CAAC,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,CADF,CADF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,QADH,CAJF,CADF,CADM,EAWNE,QAAQ,CAACC,IAXH,CAAP;AAaA,CAdD;;AAgBA,MAAMC,KAAN,SAAoBd,KAAK,CAACC,SAA1B,CAAoC;AAElCc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAWnBZ,MAXmB,GAWV,MAAM;AAChB,WAAKa,QAAL,CAAc;AACbC,QAAAA,MAAM,EAAE,CAAC,KAAKC,KAAL,CAAWD,MADP;AAEVE,QAAAA,WAAW,EAAE;AAFH,OAAd;AAIE,KAhBkB;;AAAA,SAkBnBZ,SAlBmB,GAkBNa,KAAD,IAAW;AACxB,aAAOA,KAAK,CAACC,OAAN,KAAkB,EAAlB,IAAwB,KAAKlB,MAAL,EAA/B;AACE,KApBkB;;AAAA,SAsBnBK,WAtBmB,GAsBJY,KAAD,IAAW;AACxB,UAAI,KAAKE,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBH,KAAK,CAACI,MAA9B,CAAtB,EAA6D;AAC7D,WAAKrB,MAAL;AACD,KAzBmB;;AAAA,SA2BnBsB,iBA3BmB,GA2BEL,KAAD,IAAW;AAC9B,WAAKJ,QAAL,CAAc;AAAEU,QAAAA,KAAK,EAAGN,KAAK,CAACI,MAAN,CAAaG;AAAvB,OAAd;AACA,KA7BkB;;AAAA,SA+BnBvB,cA/BmB,GA+BF,MAAM;AACtB,UAAIwB,KAAK,GAAG,IAAIC,cAAJ,EAAZ;AACC,UAAIC,IAAI,GAAG;AAAEC,QAAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWgB;AAAtB,OAAX;;AACAH,MAAAA,KAAK,CAACI,kBAAN,GAA2B,MAAM;AACzB,YAAIJ,KAAK,CAACK,UAAN,KAAqB,CAAzB,EAA4B;AAAE;AAC1B,cAAIL,KAAK,CAACM,MAAN,KAAiB,GAArB,EAA0B;AAAE;AACxB,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWT,KAAK,CAACU,YAAjB,CAAV;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,MAAhB;AACA,iBAAKzB,QAAL,CAAc;AAAEyB,cAAAA,MAAM,EAAEN,GAAG,CAACM;AAAd,aAAd;AACH;AACJ;AACJ,OARL;;AASAb,MAAAA,KAAK,CAACc,IAAN,CAAW,MAAX,EAAmB,qCAAnB,EAA0D,IAA1D;AACAd,MAAAA,KAAK,CAACe,gBAAN,CAAuB,cAAvB,EAAuC,kBAAvC;AACAf,MAAAA,KAAK,CAACgB,IAAN,CAAWR,IAAI,CAACS,SAAL,CAAef,IAAf,CAAX;AACD,KA9CkB;;AAAA,SAgDnBgB,WAhDmB,GAgDL,MAAM;AACnB,UAAIlB,KAAK,GAAG,IAAIC,cAAJ,EAAZ;AACC,UAAIC,IAAI,GAAG;AACVJ,QAAAA,KAAK,EAAE,KAAKR,KAAL,CAAWQ,KADR;AAEVK,QAAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWgB;AAFV,OAAX;;AAIAH,MAAAA,KAAK,CAACI,kBAAN,GAA2B,MAAM;AACzB,YAAIJ,KAAK,CAACK,UAAN,KAAqB,CAAzB,EAA4B;AAAE;AAC1B,cAAIL,KAAK,CAACM,MAAN,KAAiB,GAArB,EAA0B;AAAE;AACxB,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWT,KAAK,CAACU,YAAjB,CAAV;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACY,QAAhB;AACA,iBAAK/B,QAAL,CAAc;AAAEgC,cAAAA,SAAS,EAAEb,GAAG,CAACY;AAAjB,aAAd;AACH;AACJ;AACJ,OARL;;AASAR,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACAF,MAAAA,KAAK,CAACc,IAAN,CAAW,MAAX,EAAmB,mCAAnB,EAAwD,IAAxD;AACAd,MAAAA,KAAK,CAACe,gBAAN,CAAuB,cAAvB,EAAuC,kBAAvC;AACAf,MAAAA,KAAK,CAACgB,IAAN,CAAWR,IAAI,CAACS,SAAL,CAAef,IAAf,CAAX;AACA,WAAKd,QAAL,CAAc;AAAEG,QAAAA,WAAW,EAAG;AAAhB,OAAd;AACD,KApEkB;;AAElB,SAAKD,KAAL,GAAa;AACZD,MAAAA,MAAM,EAAE,KADI;AAEZS,MAAAA,KAAK,EAAE,EAFK;AAGTe,MAAAA,MAAM,EAAE,EAHC;AAITtB,MAAAA,WAAW,EAAE,IAJJ;AAKT6B,MAAAA,SAAS,EAAE;AALF,KAAb;AAOA;;AA6DDC,EAAAA,MAAM,GAAG;AAER,UAAMC,cAAc,GAClB;AAAM,MAAA,QAAQ,EAAEX,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAL,CAAWQ,KAAvB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAEM;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,QAAQ,EAAE,KAAKD,iBAA/C;AAAkE,MAAA,SAAS,EAAC,YAA5E;AAAyF,MAAA,WAAW,EAAC,OAArG;AAA6G,MAAA,QAAQ,MAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFN,EAGM;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHN,CADF;AAOC,UAAM0B,YAAY,GAAG;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAArB;AACA,UAAMC,cAAc,GAAG;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAvB;AAED,WACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAE,KAAKjD,MAA3B;AAAmC,MAAA,cAAc,EAAE,KAAKC,cAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAGE,KAAKc,KAAL,CAAWD,MAAX,IACA,oBAAC,YAAD;AACC,MAAA,MAAM,EAAE,KAAKd,MADd;AAEC,MAAA,SAAS,EAAE,KAAKI,SAFjB;AAGC,MAAA,WAAW,EAAE,KAAKC,WAHnB;AAIC,MAAA,QAAQ,EAAE6C,CAAC,IAAI,KAAK/B,SAAL,GAAiB+B,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCALD,EAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,EAOC;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAE,KAAKnC,KAAL,CAAWuB,MAA1C;AAAkD,MAAA,GAAG,EAAC,2BAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,EAQG,KAAKvB,KAAL,CAAWC,WAAX,GAAyB+B,cAAzB,GACE,KAAKhC,KAAL,CAAW8B,SAAX,GAAuBG,YAAvB,GAAsCC,cAT3C,CAJF,CADH;AAmBA;;AAvGiC;;AA0GpC,eAAevC,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalTrigger = ({toggle, generateSecret}) => <button className=\"smartButtonLong\" onClick={() => { toggle(); generateSecret(); }}>enable two-factor authentication</button>;\nconst ModalContent = ({toggle, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={toggle}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass Modal extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n  \t\tisOpen: false,\n  \t\ttoken: '',\n      \tsecret: '',\n      \tnotVerified: true,\n      \tgoodToken: false\n  \t}\n  }\n\n  toggle = () => {\n\tthis.setState({ \n\t\tisOpen: !this.state.isOpen, \n\t    notVerified: true\n\t  });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.toggle();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.toggle();\n\t};\n\n  tokenInputHandler = (event) => {\n  \tthis.setState({ token : event.target.value });\n  }\t\n\n  generateSecret = () => {\n  \tvar xhttp = new XMLHttpRequest();\n    var data = { address: this.props.address };\n    xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) { // request is done\n                if (xhttp.status === 200) { // successfully\n                    var obj = JSON.parse(xhttp.responseText);\n                    console.log(obj.secret);\n                    this.setState({ secret: obj.secret });\n                }\n            }\n        };\n    xhttp.open(\"POST\", \"http://localhost:5597/totp-generate\", true);\n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhttp.send(JSON.stringify(data));\n  }\n\n  verifyToken = () => {\n  \tvar xhttp = new XMLHttpRequest();\n    var data = { \n    \ttoken: this.state.token ,\n    \taddress: this.props.address\n    };\n    xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) { // request is done\n                if (xhttp.status === 200) { // successfully\n                    var obj = JSON.parse(xhttp.responseText);\n                    console.log(obj.verified);\n                    this.setState({ goodToken: obj.verified });\n                }\n            }\n        };\n    console.log(data);\n    xhttp.open(\"POST\", \"http://localhost:5596/totp-verify\", true);\n    xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhttp.send(JSON.stringify(data));\n    this.setState({ notVerified : false });\n  }\n\n  render() {\n\n  \tconst verifyTokenBtn = \n  \t\t\t<form onSubmit={console.log(this.state.token)}>\n       \t\t  <hr/>\n\t          <input type=\"text\" name=\"token\" onChange={this.tokenInputHandler} className=\"modalInput\" placeholder=\"Token\" required/>\n\t          <button type=\"submit\" className=\"modalButton\">submit token</button>\n\t        </form>;\n\n    const correctToken = <p className=\"successToken\">The token submitted is correct.</p>;\n    const incorrectToken = <p className=\"failToken\">The token submitted is incorrect.</p>;\n\n  \treturn (\n      <div>\n       <ModalTrigger toggle={this.toggle} generateSecret={this.generateSecret}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\ttoggle={this.toggle} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t<p className=\"modalHeader\">Two-factor authentication</p>\n       \t\t<hr/>\n       \t\t<img className=\"modalImg\" src={this.state.secret} alt=\"Generic placeholder image\" />\n       \t\t{ this.state.notVerified ? verifyTokenBtn : \n            \tthis.state.goodToken ? correctToken : incorrectToken }\n       \t</ModalContent>\n       }\n      </div>\n    );\n  }\n}\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}