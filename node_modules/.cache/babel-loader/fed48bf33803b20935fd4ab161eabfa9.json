{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalDepositSafely.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({\n  handleSubmit,\n  handleInputChange,\n  errors\n}) => React.createElement(\"form\", {\n  id: \"DepositForm\",\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"text\",\n  name: \"amountToDeposit\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Amount\",\n  required: true,\n  pattern: \"\\\\d+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"safetyPubKey\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Safety Public\",\n  required: true,\n  minLength: \"42\",\n  maxLength: \"42\",\n  pattern: \"0x\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  type: \"text\",\n  name: \"privateKey\",\n  onChange: handleInputChange,\n  className: \"smartInput3\",\n  placeholder: \"Private Key\",\n  required: true,\n  minLength: \"64\",\n  maxLength: \"64\",\n  pattern: \"\\\\w+\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(\"button\", {\n  type: \"submit\",\n  className: \"smartButton\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, \"deposit safely\"), errors.amountToDeposit.length > 0 && React.createElement(\"span\", {\n  className: \"errorMultiple\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, errors.amountToDeposit), errors.privateKey.length > 0 && React.createElement(\"span\", {\n  className: \"errorMultiple\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, errors.privateKey));\n\nconst ModalContent = ({\n  closeModal,\n  modalRef,\n  onKeyDown,\n  onClickAway,\n  children\n}) => {\n  return ReactDOM.createPortal(React.createElement(\"aside\", {\n    className: \"c-modal-cover\",\n    onKeyDown: onKeyDown,\n    onClick: onClickAway,\n    tabIndex: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"c-modal-safety\",\n    ref: modalRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"c-modal__close\",\n    onClick: closeModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"c-modal__close-icon\",\n    viewBox: \"0 0 40 40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M 10,10 L 30,30 M 30,10 L 10,30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"c-modal__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, children))), document.body);\n};\n\nclass ModalDepositSafety extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'amountToDeposit':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Please input a number\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Private key has to be 64 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n          break;\n\n        case 'safetyPubKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity(\"Public key has to be 42 characters\");\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity(\"Public key has to start with '0x'\");\n          } else {\n            event.target.setCustomValidity(\"\");\n          }\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors,\n        [name]: value,\n        typed: true\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.deposit(this.state.amountToDeposit, this.state.safetyPubKey, this.state.privateKey);\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        // Build the transaction\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisig.methods.deposit().estimateGas({\n            gas: gasPrice,\n            from: this.props.address,\n            value: amountToDeposit\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount * 5),\n              // testing\n              gasPrice: web3.utils.toHex(gasPrice * 5),\n              // Pay Higher Price for testing purposes\n              to: multisigAddress,\n              value: web3.utils.toHex(amountToDeposit),\n              data: multisig.methods.deposit(safetyPubKey).encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(priv);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx); // Broadcast the transaction\n\n            web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n              console.log('Hash of transaction: ', hash);\n              modal.setState({\n                txHash: hash,\n                hashReceipt: true,\n                confirmationReceipt: false\n              });\n              modal.openModal();\n            }).once('confirmation', function (confNumber, receipt) {\n              console.log('Transaction confirmation number: ', confNumber);\n              console.log('Transaction receipt: ', receipt);\n              updateBalances();\n              modal.setState({\n                txReceipt: receipt,\n                confirmationReceipt: true,\n                hashReceipt: false\n              });\n              modal.openModal();\n            }).on('error', function (error) {\n              console.log(error);\n            });\n          });\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToDeposit: '',\n      safetyPubKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(ModalTrigger, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), this.state.txHash) : null, this.state.confirmationReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Transaction confirmed! \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), \"Please view the receipt:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), \"Transaction hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), this.state.txReceipt.transactionHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), \"Block hash is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), this.state.txReceipt.blockHash, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), \"Block number is:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), this.state.txReceipt.blockNumber, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \"Gas used:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), this.state.txReceipt.gasUsed.toString('hex')) : null));\n  }\n\n}\n\nexport default ModalDepositSafety;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/ModalDepositSafely.js"],"names":["React","Component","ReactDOM","Tx","require","Transaction","ModalTrigger","handleSubmit","handleInputChange","errors","amountToDeposit","length","privateKey","ModalContent","closeModal","modalRef","onKeyDown","onClickAway","children","createPortal","document","body","ModalDepositSafety","constructor","props","event","preventDefault","target","name","value","state","validity","patternMismatch","setCustomValidity","tooShort","setState","typed","deposit","safetyPubKey","openModal","isOpen","keyCode","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","priv","Buffer","from","eth","getTransactionCount","address","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","error","gasAmount","console","log","txObject","nonce","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\nvar Tx = require('ethereumjs-tx').Transaction;\n\nconst ModalTrigger = ({handleSubmit, handleInputChange, errors}) => \n        <form id=\"DepositForm\" onSubmit={handleSubmit}>\n          <input type=\"text\" name=\"amountToDeposit\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Amount\"\n            required pattern=\"\\d+\"/>\n          <input type=\"text\" name=\"safetyPubKey\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Safety Public\"\n            required minLength=\"42\" maxLength=\"42\" pattern=\"0x\\w+\"/>\n          <input type=\"text\" name=\"privateKey\" onChange={handleInputChange} className=\"smartInput3\" placeholder=\"Private Key\"\n            required minLength=\"64\" maxLength=\"64\" pattern=\"\\w+\"/>\n          <button type=\"submit\" className=\"smartButton\">deposit safely</button>\n          {errors.amountToDeposit.length > 0 && <span className='errorMultiple'>{errors.amountToDeposit}</span>}\n          {errors.privateKey.length > 0 && <span className='errorMultiple'>{errors.privateKey}</span>}\n        </form>;\nconst ModalContent = ({closeModal, modalRef, onKeyDown, onClickAway, children}) => {\n\treturn ReactDOM.createPortal(\n\t\t<aside className=\"c-modal-cover\" onKeyDown={onKeyDown} onClick={onClickAway} tabIndex=\"0\">\n\t\t  <div className=\"c-modal-safety\" ref={modalRef}>\n\t\t    <button className=\"c-modal__close\" onClick={closeModal}>\n\t\t      <svg className=\"c-modal__close-icon\" viewBox=\"0 0 40 40\"><path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"></path></svg>\n\t\t    </button>\n\t\t    <div className=\"c-modal__body\">\n\t\t      {children}\n\t\t    </div>\n\t\t </div>\n\t\t</aside>,\n\t\tdocument.body\n\t);\n};\n\nclass ModalDepositSafety extends React.Component {\n\n  constructor(props) {\n  \tsuper(props);\n  \tthis.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToDeposit: '',\n      safetyPubKey: '',\n      privateKey: '',\n  \t\tisOpen: false,\n      hashReceipt: false,\n      confirmationReceipt:false\n      }\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    let errors = this.state.errors;\n\n    switch (name) {\n    case 'amountToDeposit': \n      if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Please input a number\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }  \n      break;\n    case 'privateKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Private key has to be 64 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Only alphanumeric characters are allowed\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }\n      break;\n    case 'safetyPubKey':\n      if (event.target.validity.tooShort) {\n        event.target.setCustomValidity(\"Public key has to be 42 characters\");\n      } else if (event.target.validity.patternMismatch) {\n        event.target.setCustomValidity(\"Public key has to start with '0x'\");\n      } else {\n        event.target.setCustomValidity(\"\");\n      }     \n    default:\n      break;\n    }\n\n    this.setState({errors, [name]: value, typed:true});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.deposit(this.state.amountToDeposit, this.state.safetyPubKey ,this.state.privateKey);\n  }\n  \n  openModal = () => {\n\tthis.setState({ \n\t\tisOpen: true, \n\t  });\n  };\n\n  closeModal = () => {\n  this.setState({ \n    isOpen: false, \n    });\n  };\n\n  onKeyDown = (event) => {\n\treturn event.keyCode === 27 && this.closeModal();\n  }\n  \n  onClickAway = (event) => {\n\t  if (this.modalNode && this.modalNode.contains(event.target)) return;\n\t  this.closeModal();\n\t};\n\n  deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n    let web3 = this.props.web3;\n    let multisig = this.props.multisig;\n    let multisigAddress = this.props.multisigAddress;\n    let modal = this;\n    let updateBalances = this.props.updateBalances;\n    const priv = Buffer.from(privateKey, 'hex');\n\n    web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n      // Build the transaction\n        web3.eth.getGasPrice().then((gasPrice) => {\n            multisig.methods.deposit().estimateGas({gas: gasPrice, from: this.props.address, value: amountToDeposit}, function(error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount * 5), // testing\n                    gasPrice: web3.utils.toHex(gasPrice * 5), // Pay Higher Price for testing purposes\n                    to: multisigAddress,\n                    value: web3.utils.toHex(amountToDeposit),\n                    data: multisig.methods.deposit(safetyPubKey).encodeABI()\n                };\n                console.log(txObject);\n\n                // Sign the transaction\n                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                tx.sign(priv);\n\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                \n                console.log(rawTx);\n\n                // Broadcast the transaction\n                web3.eth.sendSignedTransaction(rawTx)\n                .once('transactionHash', function(hash){ \n                    console.log('Hash of transaction: ', hash)\n                    modal.setState({ \n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false                       \n                    });\n                    modal.openModal();\n                })\n                .once('confirmation', function(confNumber, receipt){ \n                    console.log('Transaction confirmation number: ', confNumber) \n                    console.log('Transaction receipt: ', receipt)\n                    updateBalances();\n                    \n                    modal.setState({ \n                      txReceipt: receipt,\n                      confirmationReceipt: true, \n                      hashReceipt: false\n                    });\n                    modal.openModal(); \n                })\n                .on('error', function(error){ console.log(error) });\n            })\n        })\n    })\n  } \n\n  render() {\n\n  \treturn (\n      <span>\n       <ModalTrigger \n        handleSubmit={this.handleSubmit} \n        handleInputChange={this.handleInputChange}\n        errors={this.state.errors}/>\n       {\n       \tthis.state.isOpen && \n       \t<ModalContent \n       \t\tcloseModal={this.closeModal} \n       \t\tonKeyDown={this.onKeyDown}\n       \t\tonClickAway={this.onClickAway}\n       \t\tmodalRef={n => this.modalNode = n}> \n       \t\t{this.state.hashReceipt ? \n            <p className=\"modalTextTx\">Transaction hash is:<br/>\n            {this.state.txHash}\n            </p> \n            : null} \n          {this.state.confirmationReceipt ?\n            <p className=\"modalTextTx\">Transaction confirmed! <br/>Please view the receipt:<br/>\n            Transaction hash is:<br/>\n            {this.state.txReceipt.transactionHash}<br/>\n            Block hash is:<br/>\n            {this.state.txReceipt.blockHash}<br/>\n            Block number is:<br/>\n            {this.state.txReceipt.blockNumber}<br/>\n            Gas used:<br/>\n            {this.state.txReceipt.gasUsed.toString('hex')}\n            </p> \n            : null} \n          \n       \t</ModalContent>\n       }\n      </span>\n    );\n  }\n}\n\nexport default ModalDepositSafety;"]},"metadata":{},"sourceType":"module"}