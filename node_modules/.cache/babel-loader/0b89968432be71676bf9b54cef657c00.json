{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract';\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateBalances = () => {\n      let etherBalance = null;\n      this.state.web3.eth.getBalance(this.state.etherAddress, balance => {\n        etherBalance = balance;\n        console.log(etherBalance);\n      });\n      this.state.multisig.methods.balances(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          console.log('Ether', etherBalance);\n          this.setState({\n            contractBalance: balance,\n            etherBalance: etherBalance\n          });\n          console.log('New etherBalance : ', this.state.etherBalance);\n          console.log('New contractBalance : ', this.state.contractBalance);\n        }\n      });\n    };\n\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: '',\n      etherBalance: '',\n      contractBalance: ''\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          etherBalance: balance\n        });\n        console.log('Account ether balance: ', this.state.etherBalance);\n      }\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          contractBalance: balance\n        });\n        console.log('The contract balance of account is: ', this.state.contractBalance);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.state.etherBalance,\n      contractBalance: this.state.contractBalance,\n      updateBalances: this.updateBalances,\n      web3: this.state.web3,\n      multisig: this.state.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","SmartContract","BlockchainData","constructor","props","updateBalances","etherBalance","state","web3","eth","getBalance","etherAddress","balance","console","log","multisig","methods","balances","call","from","error","setState","contractBalance","getDerivedStateFromProps","componentDidMount","Contract","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS } from './config';\nimport SmartContract from './SmartContract'; \n\nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: '',\n\t\t\tetherBalance: '',\n\t\t\tcontractBalance: ''\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tweb3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t        this.setState({ etherBalance: balance });\n\t    \t\tconsole.log('Account ether balance: ', this.state.etherBalance);\n\t    \t}\n\t\t\t})\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ contractBalance: balance });\n\t\t       \tconsole.log('The contract balance of account is: ', this.state.contractBalance);\n\t\t    }\n\t\t})\n  \t}\n\n  \tupdateBalances = () => {\n  \t\tlet etherBalance = null;\n  \t\tthis.state.web3.eth.getBalance(this.state.etherAddress, (balance) => {\n\t\t\t\tetherBalance = balance;\n\t\t\t\tconsole.log(etherBalance);\n\t      \t}\n\t    );\n\t    this.state.multisig.methods.balances(this.state.etherAddress).call({ from: this.state.etherAddress }, (error, balance) => {\n        \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t    \t\tconsole.log('Ether',etherBalance);\n\t      \t\tthis.setState({ contractBalance : balance, etherBalance : etherBalance});\n\t      \t\tconsole.log('New etherBalance : ', this.state.etherBalance);\n\t      \t\tconsole.log('New contractBalance : ', this.state.contractBalance);\n\t      \t}\n      \t});\n  \t}\n  \t\n\trender() {\n  \t  \treturn (\n      \t\t<div>\n        \t\t<SmartContract \n        \t\t\taddress={this.props.etherAddress} \n        \t\t\tetherBalance={this.state.etherBalance}\n        \t\t\tcontractBalance={this.state.contractBalance}\n        \t\t\tupdateBalances={this.updateBalances}\n        \t\t\tweb3={this.state.web3}\n        \t\t\tmultisig={this.state.multisig} \n        \t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}