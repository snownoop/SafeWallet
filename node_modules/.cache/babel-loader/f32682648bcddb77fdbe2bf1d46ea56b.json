{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, TOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from './config';\nimport SmartContract from './SmartContract';\nimport ERC20 from './erc20/ERC20';\nimport './css/ButtonGroup.css';\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateBalances = () => {\n      let etherBalance = null;\n      let contractBalance = null;\n      this.state.tokenImperial.methods.balanceOf(this.state.etherAddress).call({\n        from: this.state.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          let tokenImperialBalance = balance;\n          this.state.tokenDemocratic.methods.balanceOf(this.state.etherAddress, (error, balance) => {\n            if (error) {\n              console.log(error, 'Something went wrong');\n            } else {\n              let tokenDemocraticBalance = balance;\n              this.setState({\n                tokenImperialBalance: tokenImperialBalance,\n                tokenDemocraticBalance: tokenDemocraticBalance\n              });\n              console.log('New tokenImperialBalance : ', this.state.tokenImperialBalance);\n              console.log('New tokenDemocraticBalance : ', this.state.tokenDemocraticBalance);\n            }\n          });\n        }\n      });\n    };\n\n    this.onHandleClick = e => {\n      e.preventDefault();\n      var current = document.getElementsByClassName(\"active\");\n      current[0].className = current[0].className.replace(\" active\", \"\");\n      e.target.className += \" active\";\n      const name = e.target.name;\n\n      switch (name) {\n        case 'Ethereum':\n          if (this.state.Ethereum != true) {\n            this.setState({\n              'Ethereum': true\n            });\n          }\n\n          break;\n\n        case 'ERC20':\n          if (this.state.Ethereum == true) {\n            this.setState({\n              'Ethereum': false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.state = {\n      web3: '',\n      multisig: '',\n      etherAddress: '',\n      etherBalance: '',\n      tokenImperialBalance: '',\n      tokenDemocraticBalance: '',\n      contractBalance: '',\n      tokenImperialContractBalance: '',\n      tokenDemocraticContractBalance: '',\n      Ethereum: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      etherAddress: props.etherAddress\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.setState({\n      web3: web3\n    });\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.setState({\n      multisig: multisig\n    });\n    const multisigERC20Token = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n    this.setState({\n      multisigERC20Token: multisigERC20Token\n    });\n    const tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n    this.setState({\n      tokenImperial: tokenImperial\n    });\n    const tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n    this.setState({\n      tokenDemocratic: tokenDemocratic\n    });\n    web3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          etherBalance: balance\n        });\n        console.log('Account ether balance: ', this.state.etherBalance);\n      }\n    });\n    multisigERC20Token.methods.tokenBalances(this.state.etherBalance, TOKENIMPERIAL_SYMBOL).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenImperialContractBalance: balance\n        });\n        console.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n      }\n    });\n    multisig.methods.balances(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          contractBalance: balance\n        });\n        console.log('The contract balance of account is: ', this.state.contractBalance);\n      }\n    });\n    tokenImperial.methods.balanceOf(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenImperialBalance: balance\n        });\n        console.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n      }\n    });\n    tokenDemocratic.methods.balanceOf(this.state.etherAddress).call({\n      from: this.state.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.setState({\n          tokenDemocraticBalance: balance\n        });\n        console.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n      }\n    }); // this.interval = setInterval(this.updateBalances, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"smart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btnGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttonInGroup active\",\n      name: \"Ethereum\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Ethereum\"), React.createElement(\"button\", {\n      className: \"buttonInGroup\",\n      name: \"ERC20\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"ERC20\")), this.state.Ethereum ? React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.state.etherBalance,\n      contractBalance: this.state.contractBalance,\n      updateBalances: this.updateBalances,\n      web3: this.state.web3,\n      multisig: this.state.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }) : React.createElement(ERC20, {\n      web3: this.state.web3,\n      address: this.props.etherAddress,\n      tokenImperialBalance: this.state.tokenImperialBalance,\n      tokenDemocraticBalance: this.state.tokenDemocraticBalance,\n      tokenImperial: this.state.tokenImperial,\n      tokenDemocratic: this.state.tokenDemocratic,\n      multisigERC20Address: MULTISIG_ERC20_ADDRESS,\n      multisigERC20Token: this.state.multisigERC20Token,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BlockchainData;","map":{"version":3,"sources":["/Users/Raid/Mastering_Ethereum/DevelopingFirstDapp/Testing/src/BlockchainData.js"],"names":["React","Component","Web3","Tx","EthCrypto","MULTISIG_ABI","MULTISIG_ADDRESS","MULTISIG_ERC20_ABI","MULTISIG_ERC20_ADDRESS","ERC20_ABI","TOKENIMPERIAL_ADDRESS","TOKENDEMOCRATIC_ADDRESS","TOKENIMPERIAL_SYMBOL","TOKENDEMOCRATIC_SYMBOL","SmartContract","ERC20","BlockchainData","constructor","props","updateBalances","etherBalance","contractBalance","state","tokenImperial","methods","balanceOf","etherAddress","call","from","error","balance","console","log","tokenImperialBalance","tokenDemocratic","tokenDemocraticBalance","setState","onHandleClick","e","preventDefault","current","document","getElementsByClassName","className","replace","target","name","Ethereum","web3","multisig","tokenImperialContractBalance","tokenDemocraticContractBalance","getDerivedStateFromProps","componentDidMount","eth","Contract","multisigERC20Token","getBalance","tokenBalances","balances","componentWillUnmount","clearInterval","interval","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Tx from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, \n\tTOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from './config';\nimport SmartContract from './SmartContract'; \nimport ERC20 from './erc20/ERC20';\nimport './css/ButtonGroup.css';\n\n\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/ \nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tweb3: '',\n\t\t\tmultisig: '',\n\t\t\tetherAddress: '',\n\t\t\tetherBalance: '',\n\t\t\ttokenImperialBalance: '',\n\t\t\ttokenDemocraticBalance: '',\n\t\t\tcontractBalance: '',\n\t\t\ttokenImperialContractBalance: '',\n\t\t\ttokenDemocraticContractBalance: '',\n\t\t\tEthereum: true\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(props, state) {\n    \treturn {etherAddress: props.etherAddress };\n  \t}\n\n  \tcomponentDidMount() {\n  \t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n  \t\tthis.setState({ web3: web3 });\n  \t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.setState({ multisig: multisig });\n\t\tconst multisigERC20Token = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n\t\tthis.setState({ multisigERC20Token: multisigERC20Token });\n\t\tconst tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n\t\tthis.setState({ tokenImperial: tokenImperial });\n\t\tconst tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n\t\tthis.setState({ tokenDemocratic: tokenDemocratic });\n\t\tweb3.eth.getBalance(this.state.etherAddress, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error)\n\t\t\t} else {\n\t\t        this.setState({ etherBalance: balance });\n\t    \t\tconsole.log('Account ether balance: ', this.state.etherBalance);\n\t    \t}\n\t\t\t})\n\t\tmultisigERC20Token.methods.tokenBalances(this.state.etherBalance, TOKENIMPERIAL_SYMBOL).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialContractBalance: balance });\n\t\t       \tconsole.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n\t\t    }\n\t\t})\n\n\t\tmultisig.methods.balances(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ contractBalance: balance });\n\t\t       \tconsole.log('The contract balance of account is: ', this.state.contractBalance);\n\t\t    }\n\t\t})\n\n\t\ttokenImperial.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenImperialBalance: balance });\n\t\t       \tconsole.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n\t\t    }\n\t\t})\n\n\t\ttokenDemocratic.methods.balanceOf(this.state.etherAddress).call({from: this.state.etherAddress}, (error, balance) => {\n\t\t    if (error) {\n\t\t        console.log(error)\n\t\t    } else {\n\t\t        this.setState({ tokenDemocraticBalance: balance });\n\t\t       \tconsole.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n\t\t    }\n\t\t})\n\n\t\t// this.interval = setInterval(this.updateBalances, 15000);\n  \t}\n\n  \tcomponentWillUnmount() {\n\t   \tclearInterval(this.interval);\n\t}\n\n  \tupdateBalances = () => {\n  \t\tlet etherBalance = null;\n  \t\tlet contractBalance = null\n\t    this.state.tokenImperial.methods.balanceOf(this.state.etherAddress).call({ from: this.state.etherAddress }, (error, balance) => {\n        \tif (error) {\n\t    \t\tconsole.log(error);\n\t    \t} else {\n\t    \t\tlet tokenImperialBalance = balance;\n\t    \t\tthis.state.tokenDemocratic.methods.balanceOf(this.state.etherAddress, (error, balance) => {\n\t\t  \t\t\tif (error) {\n\t\t  \t\t\t\tconsole.log(error, 'Something went wrong');\n\t\t  \t\t\t} else {\n\t\t\t\t\t\tlet tokenDemocraticBalance = balance;\n\t\t\t      \t\tthis.setState({ tokenImperialBalance : tokenImperialBalance, tokenDemocraticBalance : tokenDemocraticBalance});\n\t\t\t      \t\tconsole.log('New tokenImperialBalance : ', this.state.tokenImperialBalance);\n\t\t\t      \t\tconsole.log('New tokenDemocraticBalance : ', this.state.tokenDemocraticBalance);\n\t\t\t      \t}\n\t\t\t      }\n\t\t\t    );\n\t      \t}\n      \t});\n  \t}\n\n  \tonHandleClick = (e) => {\n  \t\te.preventDefault();\n  \t\tvar current = document.getElementsByClassName(\"active\");\n\t\tcurrent[0].className = current[0].className.replace(\" active\", \"\");\n\t\te.target.className += \" active\";\n\t\tconst name = e.target.name;\n\n\t    switch (name) {\n\t    case 'Ethereum': \n\t      if (this.state.Ethereum != true) {\n\t\t\tthis.setState({ 'Ethereum': true });\n\t      }\n\t      break;\n\t    case 'ERC20': \n\t      if (this.state.Ethereum == true) {\n\t\t\tthis.setState({ 'Ethereum': false });\n\t      }\n\t      break;   \n\t    default:\n\t      break;\n\t    }\n  \t}\n  \t\n\trender() {\n  \t  \treturn (\n      \t\t<div id=\"content\" className =\"smart\">\n      \t\t\t<div className=\"btnGroup\">\n\t\t\t\t  \t<button className=\"buttonInGroup active\" name=\"Ethereum\" onClick={this.onHandleClick}>Ethereum</button>\n\t\t\t\t  \t<button className=\"buttonInGroup\" name=\"ERC20\" onClick={this.onHandleClick}>ERC20</button>\n      \t\t\t</div>\n      \t\t\t{\n      \t\t\tthis.state.Ethereum ? \n        \t\t<SmartContract \n        \t\t\taddress={this.props.etherAddress} \n        \t\t\tetherBalance={this.state.etherBalance}\n        \t\t\tcontractBalance={this.state.contractBalance}\n        \t\t\tupdateBalances={this.updateBalances}\n        \t\t\tweb3={this.state.web3}\n        \t\t\tmultisig={this.state.multisig} \n        \t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n        \t\t:\n        \t\t<ERC20 \n        \t\t\tweb3={this.state.web3}\n        \t\t\taddress={this.props.etherAddress} \n        \t\t\ttokenImperialBalance={this.state.tokenImperialBalance}\n        \t\t\ttokenDemocraticBalance={this.state.tokenDemocraticBalance}\n        \t\t\ttokenImperial={this.state.tokenImperial}\n        \t\t\ttokenDemocratic={this.state.tokenDemocratic}\n        \t\t\tmultisigERC20Address={MULTISIG_ERC20_ADDRESS}\n        \t\t\tmultisigERC20Token={this.state.multisigERC20Token}/>\n        \t\t}\n      \t\t</div>  \n      \t);\n  }\n}\n\nexport default BlockchainData;\n"]},"metadata":{},"sourceType":"module"}